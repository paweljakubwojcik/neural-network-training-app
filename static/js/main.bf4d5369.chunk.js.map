{"version":3,"sources":["context/Data.tsx","util/getParamNames.ts","util/unNormalizeTensor.ts","constants/index.ts","util/normalizeTensor.ts","context/Tensorflow.tsx","styles/globalStyles.js","styles/MaterialTheme.js","components/StyledCard.jsx","styles/constants.js","components/Layout.tsx","components/CounterControl.tsx","containers/LayersControls.jsx","components/NetworkDiagram.tsx","containers/ModelOptions.jsx","util/dataConverter.ts","components/FileInput.tsx","containers/dataForm/DataFromDiskForm.tsx","containers/dataForm/DataFromURLForm.tsx","containers/dataForm/ChooseInputOutputs.tsx","containers/dataForm/DataForm.tsx","util/mathFunctionGenerator.ts","containers/dataForm/MathFunctionGenerator.tsx","containers/TrainingDataForm.tsx","containers/EvaluationDataForm.tsx","containers/LearningSettings.jsx","components/PopMenu.tsx","components/Chart.tsx","components/ChartFullScreen.tsx","components/ChartContainer.tsx","hooks/useChartData.ts","components/ErrorMessage.tsx","containers/TrainingSection.tsx","containers/EvaluationSection.jsx","pages/Main.jsx","App.jsx","index.js"],"names":["DataContext","createContext","learningData","evaluationData","initialInputOutputVector","asTensor","tf","keys","data","useDataObject","useState","inputs","setInputs","labels","setLabels","scatter","setScatter","useEffect","merged","Object","entries","filter","key","reduce","arraySync","forEach","value","index","console","log","getDataSetter","useCallback","setter","Tensor","existing","tensorList","values","map","getDataRemover","fromEntries","addInput","addLabel","removeInput","removeLabel","DataProvider","children","props","Provider","useData","useContext","STRIP_COMMENTS","ARGUMENT_NAMES","TYPES","centered","epsilon","momentum","decay","learningRate","useNesterov","rho","initialAccumulatorValue","beta2","beta1","normalizeTensor","normalizedTensor","Min","Max","mul","sub","add","ACTIVATION_IDENTIFIRES","LOSSES_FUNCTIONS","losses","METRICS","metrics","tensor","max","min","div","defaultOptimizerOptions","initialModelSettings","layers","name","units","activation","adjustable","optimizer","train","sgd","optimizerOptions","loss","metric","initialLearningSettings","batchSize","epochs","normalize","TensorflowContext","modelSettings","learningSettings","isCompiled","isTraining","trainModel","a","evaulateData","compileModel","setLayersUnits","layerName","newValue","addLayer","removeLayer","setActivationFunction","stopTraining","setLearningOption","option","setOptimizer","newOptimazer","setOptimizerOption","setLoss","setMetric","TensorflowProvider","model","useRef","setCompiled","setTraining","setModelSettings","setLearningSettings","state","layerToChange","find","layer","length","splice","current","dense","inputShape","undefined","compile","summary","onEpochEndCallback","onTrainBeginCallback","learningInput","learningLabels","inputKeys","labelKeys","input","inputMin","inputMax","label","labelMin","labelMax","print","MAX_TEST","MIN_TEST","testVector","k","reshape","fit","shuffle","validationSplit","yieldEvery","callbacks","onTrainBegin","onEpochEnd","epoch","logs","currentTrainingLog","x","y","val","predictedTensor","predict","unNormalizeTensor","predictedArray","testArray","currentPrediction","j","i","testInput","testLabels","evaluation","evaluate","finalPrediction","errorTensor","prediction","error","options","prev","newOptimizer","func","fnStr","toString","replace","result","slice","indexOf","match","word","type","defaulValue","getParamNames","defaultValue","parseFloat","isNaN","newState","useTensorflow","GlobalStyles","createGlobalStyle","theme","palette","background","default","text","secondary","primary","main","light","contrastText","createMuiTheme","overrides","MuiFormControl","root","margin","StyledCard","styled","Card","StyledCardHeader","header","Header","Container","Column","gridName","Row","h1","CounterControl","setCounter","step","count","styles","inputRef","style","display","IconButton","onClick","size","disabled","fontSize","StyledInput","ref","onInput","e","target","valueAsNumber","LayersControls","LayerControl","marginRight","Select","labelId","onChange","MenuItem","Title","justifyContent","Button","startIcon","h3","NetworkDiagram","color","nodes","numberOfNodes","step_x","Array","fill","zero","lines","node","x1","y1","x2","y2","push","start","end","curr","width","height","position","zIndex","Line","Circle","top","left","line","ModelOptions","learningAlgorithmOptions","FormControl","InputLabel","id","method","flexWrap","maxWidth","Input","getDataFromCSVFile","file","Promise","res","rej","Papa","parse","complete","errors","fields","meta","skipEmptyLines","dynamicTyping","transformHeader","FileInput","forwardRef","helperText","fileInputVisibility","setFileInputVis","fileInputHover","setFileInputHover","handleBodyDrag","relatedTarget","document","addEventListener","removeEventListener","$visibility","accept","onDragEnter","onDragLeave","Label","hover","htmlFor","DataFromDiskForm","setData","setFields","setFileName","handleUpload","files","item","variant","click","DataFromURLForm","URL","setURL","handleClick","fetch","split","reverse","json","alignItems","TextField","fullWidth","ChooseInputOutput","dataContext","inputToRemove","includes","labelToRemove","inputToAdd","labelToAdd","obj","list","setList","title","formState","VectorColumn","setHover","onMouseEnter","onMouseLeave","handleDelete","select","field","visible","TextFieldContainer","minWidth","transform","transition","AddButton","useTheme","shadows","bottom","boxShadow","backgroundColor","DEFAULT_MAX","DEFAULT_LENGTH","getNoise","level","Math","random","getXs","Error","mathFunctionGenerator","linear","params","b","noise","exp","E","pow","sin","w","PI","gauss","sigma","sqrt","defaultParams","paramMap","concat","defaults","FUNC","MathFunctionGenerator","setFunction","setParams","ButtonGroup","param","generated","DataForm","whichData","FILE","setMethod","MATH","TrainingDataForm","LearningSettings","FormControlLabel","control","Checkbox","checked","PopMenu","handleClose","open","anchorEl","Menu","keepMounted","onClose","op","selected","Chart","register","registerables","plugin","beforeDraw","chart","ctx","canvas","getContext","save","globalCompositeOperation","fillStyle","fillRect","restore","ykeys","xkeys","chartInstance","update","destroy","warn","xAxisKey","setXAxisKey","yAxisKey","setYAxisKey","xOptions","setXOptions","yOptions","setYOptions","xButton","yButton","canvasRef","reference","parsing","scales","font","plugins","InvisibleButton","v","right","button","ChartFullScreen","MODAL_CHART_ID","StyledModal","closeAfterTransition","BackdropComponent","Backdrop","BackdropProps","timeout","Fade","in","ModalCard","image","getChart","toBase64Image","downloadLink","createElement","href","download","downloadPicture","Modal","ChartContainer","modalOpen","setModaleOpen","chartData","setChartData","deepEqual","datasets","useChartData","marginLeft","ErrorMessage","TrainingSection","setErrors","trainingLogs","setTrainingLogs","trainingValLogs","setTrainingValLogs","trainingEffects","setTrainingEffects","MainColor","SecondaryColor","handleTrainModel","showLine","borderColor","pointRadius","animation","endIcon","message","evaluationResults","setEvaluationResults","inputProps","readOnly","Main","App","ThemeProvider","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.bf4d5369.chunk.js","sourcesContent":["import { createContext, useContext, useState, ReactNode, useEffect } from 'react'\r\nimport * as tf from '@tensorflow/tfjs'\r\nimport { Tensor, TensorLike } from '@tensorflow/tfjs'\r\nimport { useCallback } from 'react'\r\n\r\nconst initialState = {\r\n    learningData: {} as DataObject,\r\n    evaluationData: {} as DataObject,\r\n}\r\n\r\nconst DataContext = createContext({\r\n    ...initialState,\r\n})\r\n\r\ntype TensorsSet = {\r\n    [name: string]: Tensor | TensorLike\r\n}\r\n\r\nexport type InputOutputVector = {\r\n    data: TensorsSet\r\n    asTensor: Tensor\r\n    keys: string[]\r\n}\r\n\r\nexport type DataObject = {\r\n    inputs: InputOutputVector\r\n    labels: InputOutputVector\r\n    scatter: { [key: string]: number }[]\r\n    addInput: (data: TensorsSet) => void\r\n    addLabel: (data: TensorsSet) => void\r\n    removeInput: (key: string | undefined) => void\r\n    removeLabel: (key: string | undefined) => void\r\n}\r\n\r\nconst initialInputOutputVector = {\r\n    asTensor: tf.tensor([]),\r\n    keys: [],\r\n    data: {},\r\n}\r\n\r\nfunction useDataObject(): DataObject {\r\n    const [inputs, setInputs] = useState<InputOutputVector>(initialInputOutputVector)\r\n    const [labels, setLabels] = useState<InputOutputVector>(initialInputOutputVector)\r\n    const [scatter, setScatter] = useState<{ [key: string]: number }[]>([])\r\n\r\n    useEffect(() => {\r\n        const merged = { ...inputs.data, ...labels.data }\r\n        /* const keys = Object.keys(merged)\r\n        if (!keys.length) return\r\n\r\n        const tensor = tf.tensor([inputs.asTensor.arraySync(), labels.asTensor.arraySync()])\r\n        console.log(tensor.shape)\r\n        const scatter = (tensor.reshape([-1, tensor.shape[0]]).arraySync() as number[][]).map(\r\n            (array) => Object.fromEntries(array.map((value, index) => [keys[index], value]))\r\n        ) */\r\n\r\n        const scatter = Object.entries(merged)\r\n            .filter(([key]) => key !== 'keys' && key !== 'asTensor')\r\n            .reduce((scatter, [key, value]) => {\r\n                const asArray = (value as Tensor).arraySync() as number[]\r\n                asArray.forEach((value, index) => {\r\n                    scatter[index] = { ...scatter[index], [key]: value }\r\n                })\r\n                return scatter\r\n            }, [] as { [key: string]: number }[])\r\n\r\n        setScatter(scatter)\r\n\r\n        console.log({ inputs, labels })\r\n    }, [inputs, labels])\r\n\r\n    const getDataSetter = useCallback(\r\n        (setter: any) => (data: TensorsSet) => {\r\n            //check for TensorLikeObjects\r\n            Object.entries(data).forEach(([key, value]) => {\r\n                if (!(value instanceof Tensor)) {\r\n                    data[key] = tf.tensor(value)\r\n                }\r\n            })\r\n            setter((existing: InputOutputVector) => {\r\n                const tensorList = { ...existing.data, ...data }\r\n                return {\r\n                    data: tensorList,\r\n                    asTensor: tf.tensor(\r\n                        Object.values(tensorList).map((value) => (value as Tensor).arraySync())\r\n                    ),\r\n                    keys: Object.keys(tensorList),\r\n                }\r\n            })\r\n        },\r\n        []\r\n    )\r\n\r\n    const getDataRemover = useCallback(\r\n        (setter: any) => (key: string | undefined) => {\r\n            if (!key) return\r\n            setter((existing: InputOutputVector) => {\r\n                const tensorList = Object.fromEntries(\r\n                    Object.entries(existing.data).filter(([name]) => name !== key)\r\n                ) as TensorsSet\r\n                return {\r\n                    data: tensorList,\r\n                    asTensor: tf.tensor(\r\n                        Object.values(tensorList).map((value) => (value as Tensor).arraySync())\r\n                    ),\r\n                    keys: Object.keys(tensorList),\r\n                }\r\n            })\r\n        },\r\n        []\r\n    )\r\n\r\n    const addInput = getDataSetter(setInputs)\r\n    const addLabel = getDataSetter(setLabels)\r\n    const removeInput = getDataRemover(setInputs)\r\n    const removeLabel = getDataRemover(setLabels)\r\n\r\n    return {\r\n        inputs,\r\n        labels,\r\n        addInput,\r\n        addLabel,\r\n        removeInput,\r\n        removeLabel,\r\n        scatter,\r\n    }\r\n}\r\n\r\nfunction DataProvider({ children, ...props }: { children: ReactNode }) {\r\n    const learningData = useDataObject()\r\n    const evaluationData = useDataObject()\r\n\r\n    return (\r\n        <DataContext.Provider\r\n            value={{\r\n                learningData,\r\n                evaluationData,\r\n            }}\r\n            {...props}\r\n        >\r\n            {children}\r\n        </DataContext.Provider>\r\n    )\r\n}\r\n\r\nconst useData = () => useContext(DataContext)\r\n\r\nexport { DataContext, DataProvider, useData }\r\n","const STRIP_COMMENTS = /((\\/\\/.*$)|(\\/\\*[\\s\\S]*?\\*\\/))/gm\r\nconst ARGUMENT_NAMES = /([^\\s,]+)/g\r\n\r\nconst TYPES: {\r\n    [key: string]: 'boolean' | 'number'\r\n} = {\r\n    centered: 'boolean',\r\n    epsilon: 'number',\r\n    momentum: 'number',\r\n    decay: 'number',\r\n    learningRate: 'number',\r\n    useNesterov: 'boolean',\r\n    rho: 'number',\r\n    initialAccumulatorValue: 'number',\r\n    beta2: 'number',\r\n    beta1: 'number',\r\n}\r\n\r\ntype Params = {\r\n    key: string\r\n    defaulValue?: string\r\n    type: 'boolean' | 'number' | 'undefined'\r\n}\r\n\r\n/**\r\n *\r\n * @param func\r\n * @returns Array of objects containing names , type and default value of parameters of a function\r\n */\r\nexport default function getParamNames(func: Function): {\r\n    key: string\r\n    defaulValue?: string\r\n    type: 'boolean' | 'number' | 'undefined'\r\n}[] {\r\n    const fnStr = func.toString().replace(STRIP_COMMENTS, '')\r\n    const result = fnStr\r\n        .slice(fnStr.indexOf('(') + 1, fnStr.indexOf(')'))\r\n        .match(ARGUMENT_NAMES) as string[]\r\n    if (result === null) return []\r\n\r\n    return result.reduce((a, word, i) => {\r\n        if (i === 0) return [{ key: word, type: TYPES[word] }, ...a]\r\n        if (word === '=') return [...a]\r\n        if (result[i - 1] === '=') {\r\n            a[0].defaulValue = word\r\n            return [...a]\r\n        }\r\n        return [{ key: word, type: TYPES[word] }, ...a]\r\n    }, [] as Params[])\r\n}\r\n","import * as tf from '@tensorflow/tfjs'\r\nimport { Tensor } from '@tensorflow/tfjs'\r\n\r\nexport default function normalizeTensor(normalizedTensor: Tensor, Min: Tensor, Max: Tensor) {\r\n    return tf.tidy(() => {\r\n        return normalizedTensor.mul(Max.sub(Min)).add(Min)\r\n    })\r\n}\r\n","import { losses, metrics } from '@tensorflow/tfjs'\r\n\r\nexport const MIN_UNITS = 1\r\nexport const MAX_UNITS = 255\r\n\r\nexport const MAX_LAYERS = 5\r\nexport const MIN_LAYERS = 2\r\n\r\nexport const ACTIVATION_IDENTIFIRES = [\r\n    'linear',\r\n    'relu',\r\n    'elu',\r\n    'hardSigmoid',\r\n    'relu6',\r\n    'selu',\r\n    'sigmoid',\r\n    'softmax',\r\n    'softplus',\r\n    'softsign',\r\n    'tanh',\r\n    'swish',\r\n    'mish',\r\n] as const\r\n\r\nexport const LOSSES_FUNCTIONS = Object.keys(losses) as (keyof typeof losses)[]\r\nexport const METRICS = Object.keys(metrics) as (keyof typeof metrics)[]\r\n","import * as tf from '@tensorflow/tfjs'\r\nimport { Tensor } from '@tensorflow/tfjs'\r\n\r\nexport default function normalizeTensor(tensor: Tensor) {\r\n    return tf.tidy(() => {\r\n        const Max = tensor.max()\r\n        const Min = tensor.min()\r\n\r\n        const normalizedTensor = tensor.sub(Min).div(Max.sub(Min))\r\n\r\n        return {\r\n            normalizedTensor,\r\n            Min,\r\n            Max,\r\n        }\r\n    })\r\n}\r\n","import React, {\r\n    createContext,\r\n    ReactNode,\r\n    useCallback,\r\n    useEffect,\r\n    useRef,\r\n    useState,\r\n    useContext,\r\n} from 'react'\r\nimport * as tf from '@tensorflow/tfjs'\r\n\r\nimport getParamNames from '../util/getParamNames'\r\nimport unNormalizeTensor from '../util/unNormalizeTensor'\r\n\r\nimport {\r\n    MIN_UNITS,\r\n    MAX_UNITS,\r\n    MAX_LAYERS,\r\n    MIN_LAYERS,\r\n    ACTIVATION_IDENTIFIRES,\r\n    METRICS,\r\n    LOSSES_FUNCTIONS,\r\n} from '../constants'\r\n\r\nimport { Optimizer, Sequential, train } from '@tensorflow/tfjs'\r\nimport { useData } from './Data'\r\nimport normalizeTensor from '../util/normalizeTensor'\r\n\r\ntype ActivationIdentifier = typeof ACTIVATION_IDENTIFIRES[number]\r\ntype OptimizerType = keyof typeof train\r\ntype LossesType = typeof LOSSES_FUNCTIONS[number]\r\ntype MetricType = typeof METRICS[number]\r\n\r\ntype OptimizerConstructor = (...params: any) => Optimizer\r\n\r\nexport interface ModelSettings {\r\n    layers: {\r\n        name: string\r\n        units: number\r\n        activation?: ActivationIdentifier\r\n        adjustable: boolean\r\n    }[]\r\n    optimizer: OptimizerConstructor\r\n    optimizerOptions: any\r\n    loss: LossesType\r\n    metric: MetricType\r\n}\r\nexport interface LearningSettings {\r\n    batchSize: number\r\n    epochs: number\r\n    normalize: boolean\r\n}\r\n\r\nconst defaultOptimizerOptions: {\r\n    [key: string]: number | boolean\r\n} = {\r\n    learningRate: 0.001,\r\n    momentum: 1,\r\n}\r\n\r\nconst initialModelSettings: ModelSettings = {\r\n    layers: [\r\n        {\r\n            name: 'Input Layer',\r\n            units: 1,\r\n            activation: 'linear',\r\n            adjustable: false,\r\n        },\r\n        {\r\n            name: 'Hidden Layer 1',\r\n            units: 4,\r\n            activation: 'linear',\r\n            adjustable: true,\r\n        },\r\n        {\r\n            name: 'Output Layer',\r\n            units: 1,\r\n            adjustable: false,\r\n            activation: 'linear',\r\n        },\r\n    ],\r\n    optimizer: train.sgd as unknown as OptimizerConstructor,\r\n    optimizerOptions: {\r\n        learningRate: 0.001,\r\n    },\r\n    loss: 'meanSquaredError',\r\n    metric: 'meanSquaredError',\r\n}\r\n\r\ntype evaluationResults = {\r\n    evaluation: number[]\r\n    prediction: { [key: string]: number }[]\r\n    error: { [key: string]: number }[]\r\n}\r\n\r\n/**\r\n * @argument currentTrainingLog - object containing metric loss and validation error from current epoch\r\n * @argument currentPrediction - vector with current prediction\r\n */\r\nexport type onEpochEndCallback = (\r\n    currentTrainingLog: {\r\n        metric: { [key: string]: number }\r\n        val: { [key: string]: number }\r\n    },\r\n    currentPrediction: { [key: string]: number }[]\r\n) => void\r\n\r\ntype trainModelFunction = (args: {\r\n    onEpochEndCallback: onEpochEndCallback\r\n    onTrainBeginCallback: () => void\r\n}) => Promise<void>\r\n\r\nconst initialLearningSettings: LearningSettings = {\r\n    batchSize: 32,\r\n    epochs: 100,\r\n    normalize: true,\r\n}\r\n\r\n//TODO: model settings into it's own context, or reducer\r\n\r\nconst TensorflowContext = createContext({\r\n    modelSettings: initialModelSettings,\r\n    learningSettings: initialLearningSettings,\r\n    isCompiled: false,\r\n    isTraining: false,\r\n    trainModel: (async () => {}) as trainModelFunction,\r\n    evaulateData: (): evaluationResults => ({} as evaluationResults),\r\n    compileModel: () => {},\r\n    setLayersUnits: (layerName: string, newValue: number) => {},\r\n    addLayer: () => {},\r\n    removeLayer: () => {},\r\n    setActivationFunction: (layerName: string, newValue: ActivationIdentifier) => {},\r\n    stopTraining: () => {},\r\n    setLearningOption: (option: { [k in keyof LearningSettings]?: LearningSettings[k] }) => {},\r\n    setOptimizer: (newOptimazer: OptimizerType) => {},\r\n    setOptimizerOption: (key: string, newValue: any) => {},\r\n    setLoss: (newValue: LossesType) => {},\r\n    setMetric: (newValue: MetricType) => {},\r\n})\r\n\r\nfunction TensorflowProvider({ children }: { children: ReactNode }) {\r\n    const { learningData, evaluationData } = useData()\r\n\r\n    const model = useRef<Sequential>(tf.sequential())\r\n\r\n    const [isCompiled, setCompiled] = useState(false)\r\n    const [isTraining, setTraining] = useState(false)\r\n\r\n    // possibly change it to hook\r\n    const [modelSettings, setModelSettings] = useState(initialModelSettings)\r\n    const [learningSettings, setLearningSettings] = useState(initialLearningSettings)\r\n\r\n    // when any setting is change model needs to be compiled again\r\n    useEffect(() => {\r\n        setCompiled(false)\r\n    }, [modelSettings])\r\n\r\n    const setLayersUnits = useCallback((layerName: string, newValue: number) => {\r\n        setModelSettings((state) => {\r\n            const layerToChange = state.layers.find((layer) => layer.name === layerName)!\r\n            if (newValue > MAX_UNITS || newValue < MIN_UNITS) return state\r\n            layerToChange.units = newValue\r\n            return { ...state }\r\n        })\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        setLayersUnits('Input Layer', learningData.inputs.keys.length)\r\n        setLayersUnits('Output Layer', learningData.labels.keys.length)\r\n    }, [learningData.inputs.keys.length, learningData.labels.keys.length, setLayersUnits])\r\n\r\n    const addLayer = useCallback(() => {\r\n        setModelSettings((state) => {\r\n            if (state.layers.length >= MAX_LAYERS) return state\r\n            state.layers.splice(-1, 0, {\r\n                name: `Hidden Layer ${state.layers.length - 1}`,\r\n                units: 1,\r\n                activation: 'linear',\r\n                adjustable: true,\r\n            })\r\n            return { ...state }\r\n        })\r\n    }, [])\r\n\r\n    const removeLayer = useCallback(() => {\r\n        setModelSettings((state) => {\r\n            if (state.layers.length <= MIN_LAYERS) return state\r\n            state.layers.splice(-2, 1)\r\n            return { ...state }\r\n        })\r\n    }, [])\r\n\r\n    const setActivationFunction = (layerName: string, newValue: ActivationIdentifier) => {\r\n        setModelSettings((state) => {\r\n            const layerToChange = state.layers.find((layer) => layer.name === layerName)!\r\n            layerToChange.activation = newValue\r\n            return { ...state }\r\n        })\r\n    }\r\n\r\n    const setOptimizer = (newOptimizer: OptimizerType) => {\r\n        const optimizer = train[newOptimizer] as OptimizerConstructor\r\n        const optimizerOptions: {\r\n            [k: string]: number | undefined | boolean\r\n        } = Object.fromEntries(\r\n            getParamNames(optimizer).map(({ key, type, defaulValue: value }) => {\r\n                let defaultValue\r\n                if (!value) defaultValue = defaultOptimizerOptions[key]\r\n                else {\r\n                    if (type === 'boolean') defaultValue = value === 'true'\r\n                    if (type === 'number') defaultValue = parseFloat(value!)\r\n                }\r\n\r\n                return [key, defaultValue]\r\n            })\r\n        )\r\n\r\n        setModelSettings((state) => ({\r\n            ...state,\r\n            optimizer,\r\n            optimizerOptions,\r\n        }))\r\n    }\r\n\r\n    const stopTraining = useCallback(() => {\r\n        model.current.stopTraining = true\r\n        setTraining(false)\r\n    }, [model])\r\n\r\n    const compileModel = useCallback(async () => {\r\n        const { layers, optimizer, optimizerOptions, loss, metric } = modelSettings\r\n\r\n        if (isTraining) stopTraining()\r\n\r\n        model.current = tf.sequential({\r\n            layers: layers.map(({ units, activation }, index) =>\r\n                tf.layers.dense({\r\n                    inputShape: index === 0 ? [units] : undefined,\r\n                    units,\r\n                    activation,\r\n                    /*  useBias: false, */\r\n                })\r\n            ),\r\n        })\r\n\r\n        model.current.compile({\r\n            optimizer: optimizer(...Object.values(optimizerOptions)),\r\n            loss: tf.losses[loss] as any, // taka fcn jest w instrukcji\r\n            metrics: tf.metrics[metric],\r\n        })\r\n\r\n        setCompiled(true)\r\n        console.log('%cModel compiled succesfully', 'font-weight: bold; font-size: 16px;')\r\n        model.current.summary()\r\n    }, [isTraining, modelSettings, stopTraining])\r\n\r\n    /**\r\n     * handles the normalization (if active), then calls a model.fit() with input and output specyfied in arguments\r\n     * calls onEpochEndsCallback on every epoch end to enable actualizing logs\r\n     */\r\n    const trainModel: trainModelFunction = useCallback(\r\n        async ({ onEpochEndCallback, onTrainBeginCallback }) => {\r\n            const { epochs, batchSize, normalize } = learningSettings\r\n\r\n            //TODO: clean up normalization\r\n\r\n            let learningInput = learningData.inputs.asTensor,\r\n                learningLabels = learningData.labels.asTensor,\r\n                labelMin: tf.Tensor,\r\n                labelMax: tf.Tensor,\r\n                inputMin: tf.Tensor,\r\n                inputMax: tf.Tensor\r\n\r\n            const inputKeys = learningData.inputs.keys\r\n            const labelKeys = learningData.labels.keys\r\n\r\n            if (normalize) {\r\n                const input = normalizeTensor(learningInput)\r\n                learningInput = input.normalizedTensor\r\n                inputMin = input.Min\r\n                inputMax = input.Max\r\n\r\n                const label = normalizeTensor(learningLabels)\r\n                learningLabels = label.normalizedTensor\r\n                labelMin = label.Min\r\n                labelMax = label.Max\r\n            }\r\n\r\n            learningInput.print()\r\n            learningLabels.print()\r\n\r\n            const GRAIN_LEVEL = 20\r\n            const MAX_TEST = learningInput.max().arraySync() as number\r\n            const MIN_TEST = learningInput.min().arraySync() as number\r\n\r\n            learningInput.min().print()\r\n\r\n            const testVector = tf\r\n                .tensor(\r\n                    inputKeys.map((k) => tf.linspace(MAX_TEST, MIN_TEST, GRAIN_LEVEL).arraySync())\r\n                )\r\n                .reshape([-1, inputKeys.length])\r\n\r\n            setTraining(true)\r\n            try {\r\n                await model.current.fit(\r\n                    learningInput.reshape([-1, inputKeys.length]),\r\n                    learningLabels.reshape([-1, labelKeys.length]),\r\n                    {\r\n                        batchSize,\r\n                        epochs,\r\n                        shuffle: true,\r\n                        validationSplit: 0.2,\r\n                        yieldEvery: 50,\r\n                        callbacks: {\r\n                            onTrainBegin: onTrainBeginCallback,\r\n                            onEpochEnd: async (epoch, logs) => {\r\n                                // object containing metric loss and validation loss for current epoch\r\n                                const currentTrainingLog = {\r\n                                    metric: { x: epoch, y: logs ? logs[modelSettings.metric] : 0 },\r\n                                    val: {\r\n                                        x: epoch,\r\n                                        y: logs ? logs[`val_${modelSettings.metric}`] : 0,\r\n                                    },\r\n                                }\r\n\r\n                                console.log(logs)\r\n                                let predictedTensor = model.current.predict(testVector) as tf.Tensor\r\n\r\n                                if (normalize)\r\n                                    predictedTensor = unNormalizeTensor(\r\n                                        predictedTensor,\r\n                                        labelMin,\r\n                                        labelMax\r\n                                    )\r\n                                const predictedArray = predictedTensor.arraySync() as number[][]\r\n                                console.log(predictedArray)\r\n\r\n                                const testArray = normalize\r\n                                    ? (unNormalizeTensor(\r\n                                          testVector,\r\n                                          inputMin,\r\n                                          inputMax\r\n                                      ).arraySync() as number[][])\r\n                                    : (testVector.arraySync() as number[][])\r\n\r\n                                // [[x, y],[x,y]],[[z],[z]] => [{x,y,z},{x,y,z}]\r\n                                const currentPrediction = predictedArray.map((y, j) =>\r\n                                    Object.fromEntries([\r\n                                        ...labelKeys.map((key, i) => [key, y[i]]),\r\n                                        ...inputKeys.map((key, i) => [key, testArray[j][i]]),\r\n                                    ])\r\n                                )\r\n\r\n                                onEpochEndCallback(currentTrainingLog, currentPrediction)\r\n                                /* console.log(logs) */\r\n                                // when fullfilling the training goal\r\n                                /* if (trainingGoal) {\r\n                        model.stopTraining = true\r\n                    } */\r\n                            },\r\n                        },\r\n                    }\r\n                )\r\n            } catch (e) {\r\n                throw e\r\n            } finally {\r\n                setTraining(false)\r\n            }\r\n        },\r\n        [learningData, learningSettings, modelSettings.metric]\r\n    )\r\n\r\n    /**\r\n     * TODO: implement proper evaulation\r\n     * @returns evaulation results\r\n     */\r\n    const evaulateData = useCallback(() => {\r\n        const { inputs, labels } = evaluationData\r\n        const { normalize } = learningSettings\r\n\r\n        // handle normalization\r\n        let learningInput = inputs.asTensor,\r\n            learningLabels = labels.asTensor,\r\n            labelMin: tf.Tensor,\r\n            labelMax: tf.Tensor,\r\n            inputMin: tf.Tensor,\r\n            inputMax: tf.Tensor\r\n\r\n        if (normalize) {\r\n            const input = normalizeTensor(learningInput)\r\n            learningInput = input.normalizedTensor\r\n            inputMin = input.Min\r\n            inputMax = input.Max\r\n\r\n            const label = normalizeTensor(learningLabels)\r\n            learningLabels = label.normalizedTensor\r\n            labelMin = label.Min\r\n            labelMax = label.Max\r\n        }\r\n\r\n        // 1.evaulate ( get total loss and metric )\r\n\r\n        const testInput = learningInput.reshape([-1, inputs.keys.length])\r\n        const testLabels = learningLabels.reshape([-1, labels.keys.length])\r\n\r\n        const evaluation = (model.current.evaluate(testInput, testLabels) as tf.Scalar[]).map(\r\n            (tensor) => tensor.arraySync()\r\n        )\r\n\r\n        // 2.get final prediction\r\n\r\n        let finalPrediction = model.current.predict(testInput) as tf.Tensor\r\n\r\n        let errorTensor = finalPrediction.sub(testLabels)\r\n\r\n        if (normalize) finalPrediction = unNormalizeTensor(finalPrediction, labelMin!, labelMax!)\r\n        if (normalize) errorTensor = unNormalizeTensor(errorTensor, labelMin!, labelMax!)\r\n\r\n        const testArray = normalize\r\n            ? (unNormalizeTensor(testInput, inputMin!, inputMax!).arraySync() as number[][])\r\n            : (testInput.arraySync() as number[][])\r\n\r\n        // [[x, y],[x,y]],[[z],[z]] => [{x,y,z},{x,y,z}]\r\n        const prediction = (finalPrediction.arraySync() as number[][]).map((y, j) =>\r\n            Object.fromEntries([\r\n                ...labels.keys.map((key, i) => [key, y[i]]),\r\n                ...inputs.keys.map((key, i) => [key, testArray[j][i]]),\r\n            ])\r\n        )\r\n        const error = (errorTensor.arraySync() as number[][]).map((y, j) =>\r\n            Object.fromEntries([\r\n                ...labels.keys.map((key, i) => [key, y[i]]),\r\n                ...inputs.keys.map((key, i) => [key, testArray[j][i]]),\r\n            ])\r\n        )\r\n\r\n        return { evaluation, prediction, error }\r\n    }, [evaluationData, learningSettings])\r\n\r\n    const setLearningOption = (\r\n        options: { [k in keyof LearningSettings]?: LearningSettings[k] }\r\n    ) => {\r\n        setLearningSettings((prev) => ({ ...prev, ...options }))\r\n    }\r\n\r\n    const setOptimizerOption = (key: any, newValue: any) => {\r\n        if (isNaN(newValue)) newValue = undefined\r\n\r\n        setModelSettings((prev) => {\r\n            const newState = {\r\n                ...prev,\r\n                optimizerOptions: { ...prev.optimizerOptions, [key]: newValue },\r\n            }\r\n            console.log(newState)\r\n            return newState\r\n        })\r\n    }\r\n\r\n    const setLoss = (newValue: LossesType) => {\r\n        setModelSettings((prev) => {\r\n            return { ...prev, loss: newValue }\r\n        })\r\n    }\r\n    const setMetric = (newValue: MetricType) => {\r\n        setModelSettings((prev) => {\r\n            return { ...prev, metric: newValue }\r\n        })\r\n    }\r\n    // move logs into new context and use useState for context\r\n\r\n    return (\r\n        <TensorflowContext.Provider\r\n            value={{\r\n                modelSettings,\r\n                learningSettings,\r\n                isCompiled,\r\n                isTraining,\r\n                trainModel,\r\n                evaulateData,\r\n                compileModel,\r\n                setLayersUnits,\r\n                addLayer,\r\n                removeLayer,\r\n                setActivationFunction,\r\n                stopTraining,\r\n                setLearningOption,\r\n                setOptimizer,\r\n                setOptimizerOption,\r\n                setLoss,\r\n                setMetric,\r\n            }}\r\n        >\r\n            {children}\r\n        </TensorflowContext.Provider>\r\n    )\r\n}\r\n\r\nconst useTensorflow = () => useContext(TensorflowContext)\r\n\r\nexport { TensorflowContext, TensorflowProvider, useTensorflow }\r\n","import { createGlobalStyle } from 'styled-components'\r\n\r\n/* variables are rewritten from the MaterialUI theme */\r\n\r\nexport const GlobalStyles = createGlobalStyle`\r\n\r\n    * {\r\n        box-sizing: border-box;\r\n    }\r\n\r\n    * :focus {\r\n            outline: none;\r\n    }\r\n\r\n    html {\r\n        /* CSS variables */\r\n        --background-color: ${(props) => props.theme.palette.background.default};\r\n        --secondary-font-color: ${(props) => props.theme.palette.text.secondary};\r\n        --font-color:${(props) => props.theme.palette.text.primary};\r\n        --primary-color: ${(props) => props.theme.palette.primary.main};\r\n        --primary-color-light: ${(props) => props.theme.palette.primary.light};\r\n        --primary-color-contrastText: ${(props) => props.theme.palette.primary.contrastText};\r\n    }\r\n\r\n    body {\r\n        margin: 0;\r\n        font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", \"Roboto\", \"Oxygen\", \"Ubuntu\", \"Cantarell\", \"Fira Sans\",\r\n            \"Droid Sans\", \"Helvetica Neue\", sans-serif;\r\n        -webkit-font-smoothing: antialiased;\r\n        -moz-osx-font-smoothing: grayscale;\r\n\r\n        background-color: var(--background-color);\r\n        color: var(--font-color);\r\n        font-size: 16px;\r\n    }\r\n\r\n    code {\r\n        font-family: source-code-pro, Menlo, Monaco, Consolas, \"Courier New\", monospace;\r\n    }\r\n\r\n    h1,\r\n    h2,\r\n    h3,\r\n    h4,\r\n    p {\r\n        margin: 0;\r\n    }\r\n\r\n    a {\r\n        text-decoration: none;\r\n        cursor: pointer;\r\n        color: inherit;\r\n        display: inline-block;\r\n        margin: 0;\r\n    }\r\n\r\n    button {\r\n        border: none;\r\n        outline: none;\r\n    }\r\n\r\n    button:active {\r\n        outline: none;\r\n        border: none;\r\n    }\r\n\r\n    input {\r\n        border: none;\r\n        outline: none;\r\n    }\r\n\r\n`\r\n","import { createMuiTheme } from '@material-ui/core/styles'\r\n\r\nexport const theme = createMuiTheme({\r\n    palette: {\r\n        text: {\r\n            secondary: 'rgba(83, 83, 83, 0.88)',\r\n        },\r\n    },\r\n    overrides: {\r\n        MuiFormControl: {\r\n            root: {\r\n                margin: '0.5em',\r\n            },\r\n        },\r\n    },\r\n})\r\n","import styled from 'styled-components'\r\nimport { Card } from '@material-ui/core'\r\nimport { MAX_DESKTOP } from '../styles'\r\n\r\nconst StyledCard = styled(Card)`\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    padding: 1em;\r\n    margin: 0.4em;\r\n    width: 100%;\r\n\r\n    max-width: 640px;\r\n    position: relative;\r\n\r\n    @media (min-width: ${MAX_DESKTOP}px) {\r\n        max-width: 800px;\r\n    }\r\n`\r\n\r\nexport const StyledCardHeader = styled.header`\r\n    display: flex;\r\n    justify-content: space-between;\r\n    width: 100%;\r\n`\r\n\r\nStyledCard.Header = StyledCardHeader\r\n\r\nexport default StyledCard\r\n","export const MAX_MOBILE = 640\r\nexport const MAX_TABLET = 1100\r\nexport const MAX_LAPTOP = 1500\r\nexport const MAX_DESKTOP = 2400\r\n","import styled, { StyledComponent } from 'styled-components'\r\nimport { MAX_LAPTOP, MAX_TABLET } from '../styles'\r\n\r\n/**\r\n * layout flex container\r\n */\r\nconst Container = styled.div`\r\n    display: grid;\r\n\r\n    grid-template-columns: repeat(3, 33%);\r\n    grid-template-areas: 'model training evaulation';\r\n\r\n    align-items: stretch;\r\n    justify-items: stretch;\r\n\r\n    width: 100%;\r\n    min-height: 100vh;\r\n    padding: 1em;\r\n\r\n    @media (max-width: ${MAX_LAPTOP}px) {\r\n        grid-template-areas:\r\n            'model training'\r\n            'model evaulation';\r\n        grid-template-columns: repeat(2, 50%);\r\n    }\r\n    @media (max-width: ${MAX_TABLET}px) {\r\n        grid-template-areas:\r\n            'model'\r\n            'training'\r\n            'evaulation';\r\n        grid-template-columns: repeat(1, 100%);\r\n    }\r\n`\r\n\r\nconst Column: StyledComponent<'div', any, {}, never> & {\r\n    Header?: StyledComponent<'h1', any, {}, never>\r\n} = styled.div<{ gridName: string }>`\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    /* flex-grow: 1; */\r\n    /* max-width: 700px; */\r\n    padding: 0.4em;\r\n    grid-area: ${(props) => props.gridName};\r\n`\r\n\r\nconst Row = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n    align-items: end;\r\n    justify-content: space-evenly;\r\n\r\n    margin: 0.5em;\r\n    width: 100%;\r\n`\r\n\r\nColumn.Header = styled.h1`\r\n    display: block;\r\n    width: 100%;\r\n`\r\n\r\nexport { Container, Column, Row }\r\n","import React, { ChangeEventHandler, useEffect, useRef } from 'react'\r\nimport styled from 'styled-components'\r\nimport { IconButton } from '@material-ui/core'\r\nimport AddIcon from '@material-ui/icons/Add'\r\nimport RemoveIcon from '@material-ui/icons/Remove'\r\n\r\ninterface CounterControlProps {\r\n    setCounter: (newValue: number) => void\r\n    count: number\r\n    step?: number\r\n    min?: number\r\n    max?: number\r\n    styles?: object\r\n}\r\n\r\nexport default function CounterControl({\r\n    setCounter,\r\n    step = 1,\r\n    count,\r\n    min,\r\n    max,\r\n    styles,\r\n    ...props\r\n}: CounterControlProps) {\r\n    const inputRef = useRef<HTMLInputElement>()\r\n\r\n    const increment = () => {\r\n        setCounter(count + step)\r\n    }\r\n    const decrement = () => {\r\n        setCounter(count - step)\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (inputRef?.current) inputRef.current.value = count.toString()\r\n    }, [count])\r\n\r\n    const handleChange: ChangeEventHandler<HTMLInputElement> = (e) => {\r\n        const newValue = e.target.valueAsNumber\r\n        if (newValue) setCounter(e.target.valueAsNumber)\r\n    }\r\n\r\n    return (\r\n        <div style={{ display: 'flex', ...styles }}>\r\n            <IconButton onClick={increment} size=\"small\" disabled={max ? count >= max : false}>\r\n                <AddIcon fontSize=\"inherit\" />\r\n            </IconButton>\r\n\r\n            <StyledInput\r\n                ref={inputRef as React.RefObject<HTMLInputElement>}\r\n                type=\"number\"\r\n                onInput={handleChange}\r\n                size={0}\r\n                style={{ margin: '0 .3em' }}\r\n            />\r\n\r\n            <IconButton onClick={decrement} size=\"small\" disabled={min ? count <= min : false}>\r\n                <RemoveIcon fontSize=\"inherit\" />\r\n            </IconButton>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst StyledInput = styled.input`\r\n    display: flex;\r\n    width: 3em;\r\n    &::-webkit-inner-spin-button,\r\n    &::-webkit-inner-spin-button {\r\n        -webkit-appearance: none;\r\n    }\r\n    appearance: textfield;\r\n`\r\n","import styled from 'styled-components'\r\nimport { Card, Button, Select, MenuItem } from '@material-ui/core'\r\nimport AddBoxIcon from '@material-ui/icons/AddBox'\r\nimport RemoveCircleIcon from '@material-ui/icons/RemoveCircle'\r\nimport CounterControl from '../components/CounterControl'\r\nimport { useTensorflow } from '../context/Tensorflow'\r\n\r\nimport { MIN_UNITS, MAX_UNITS, MAX_LAYERS, MIN_LAYERS, ACTIVATION_IDENTIFIRES } from '../constants'\r\n\r\nexport default function LayersControls() {\r\n    const {\r\n        modelSettings: { layers },\r\n        setLayersUnits,\r\n        addLayer,\r\n        setActivationFunction,\r\n        removeLayer,\r\n    } = useTensorflow()\r\n\r\n    const LayersControls = layers.map((layer, i) => (\r\n        <LayerControl key={i}>\r\n            <div style={{ marginRight: 'auto' }}>{layer.name}</div>\r\n            <Select\r\n                labelId={`${layer.name} activation function`}\r\n                value={layer.activation}\r\n                onChange={(e) => setActivationFunction(layer.name, e.target.value)}\r\n            >\r\n                {ACTIVATION_IDENTIFIRES.map((func) => (\r\n                    <MenuItem value={func} key={func}>\r\n                        {func}\r\n                    </MenuItem>\r\n                ))}\r\n            </Select>\r\n            {layer.adjustable && (\r\n                <CounterControl\r\n                    count={layer.units}\r\n                    setCounter={(value) => setLayersUnits(layer.name, value)}\r\n                    max={MAX_UNITS}\r\n                    min={MIN_UNITS}\r\n                />\r\n            )}\r\n        </LayerControl>\r\n    ))\r\n\r\n    return (\r\n        <Container>\r\n            <Title>Layers: </Title>\r\n            {LayersControls.slice(0, -1)}\r\n            <div style={{ display: 'flex', justifyContent: 'space-evenly' }}>\r\n                <Button\r\n                    startIcon={<AddBoxIcon />}\r\n                    onClick={addLayer}\r\n                    disabled={layers.length >= MAX_LAYERS}\r\n                >\r\n                    Add Layer\r\n                </Button>\r\n                <Button\r\n                    startIcon={<RemoveCircleIcon />}\r\n                    onClick={removeLayer}\r\n                    disabled={layers.length <= MIN_LAYERS}\r\n                >\r\n                    Remove Layer\r\n                </Button>\r\n            </div>\r\n\r\n            {LayersControls.slice(-1)}\r\n        </Container>\r\n    )\r\n}\r\n\r\nconst Container = styled.div`\r\n    display: flex;\r\n    width: 100%;\r\n    flex-direction: column;\r\n    align-items: center;\r\n\r\n    margin-bottom: 2em;\r\n`\r\n\r\nconst Title = styled.h3`\r\n    color: var(--secondary-font-color);\r\n    display: block;\r\n    width: 100%;\r\n`\r\n\r\nconst LayerControl = styled(Card)`\r\n    display: flex;\r\n    align-items: center;\r\n    width: 100%;\r\n    margin: 0.3em;\r\n    padding: 0.3em;\r\n    border-radius: 100px;\r\n`\r\n","import styled from 'styled-components'\r\n\r\nconst WIDTH = 300\r\nconst HEIGHT = 200\r\n\r\ninterface NetworkDiagramProps {\r\n    layers: [number]\r\n    color?: string\r\n}\r\n\r\ntype Point = {\r\n    x: number\r\n    y: number\r\n}\r\n\r\n/**\r\n * Component to visualize structure of a neural network\r\n * prop layers is an array of numbers where every number represents number of nodes in the leyer\r\n * @example layers = [1,2,1]\r\n */\r\nexport default function NetworkDiagram({ layers, color, ...props }: NetworkDiagramProps) {\r\n    const nodes: Point[][] = layers.map((numberOfNodes, j) => {\r\n        const step_x = WIDTH / (layers.length + 1)\r\n        return new Array(numberOfNodes).fill(0).map((zero, i) => {\r\n            const step_y = HEIGHT / (numberOfNodes + 1)\r\n            return { y: step_y * (i + 1), x: step_x * (j + 1) }\r\n        })\r\n    })\r\n\r\n    const lines: { start: Point; end: Point }[] = nodes\r\n        .map((node, i) => {\r\n            if (i === 0) return []\r\n            const current = node\r\n            const prev = nodes[i - 1]\r\n            let lines: { start: Point; end: Point }[] = []\r\n            current.forEach(({ x: x1, y: y1 }) => {\r\n                prev.forEach(({ x: x2, y: y2 }) => {\r\n                    lines.push({\r\n                        start: { x: x1, y: y1 },\r\n                        end: { x: x2, y: y2 },\r\n                    })\r\n                })\r\n            })\r\n            return lines\r\n        })\r\n        .reduce((prev, curr) => (prev ? [...prev, ...curr] : curr), [])\r\n\r\n    return (\r\n        <Container {...props}>\r\n            <svg style={{ width: '100%', height: '100%', position: 'absolute', zIndex: 0 }}>\r\n                {lines.map(({ start: { x: x1, y: y1 }, end: { x: x2, y: y2 } }, i) => (\r\n                    <Line x1={x1} y1={y1} x2={x2} y2={y2} key={i} />\r\n                ))}\r\n            </svg>\r\n            {nodes\r\n                .reduce((prev, curr) => [...prev, ...curr], [])\r\n                .map(({ x, y }, i) => (\r\n                    <Circle color={color} style={{ top: y + 'px', left: x + 'px' }} key={i} />\r\n                ))}\r\n        </Container>\r\n    )\r\n}\r\n\r\nconst Container = styled.div`\r\n    position: relative;\r\n    display: flex;\r\n    justify-content: space-evenly;\r\n    align-items: center;\r\n    width: ${WIDTH}px;\r\n    height: ${HEIGHT}px;\r\n`\r\n\r\nconst Circle = styled.div`\r\n    display: block;\r\n    position: absolute;\r\n    width: 30px;\r\n    height: 30px;\r\n    border-radius: 50%;\r\n    background-color: ${(props) => props.color};\r\n    box-shadow: rgba(60, 64, 67, 0.3) 0px 1px 2px 0px, rgba(60, 64, 67, 0.15) 0px 1px 3px 1px;\r\n\r\n    transform: translate(-50%, -50%);\r\n`\r\n\r\nconst Line = styled.line`\r\n    stroke: var(--secondary-font-color);\r\n    stroke-width: 3px;\r\n    opacity: 0.6;\r\n`\r\n","import styled from 'styled-components'\r\nimport { Row } from '../components/Layout'\r\nimport { train } from '@tensorflow/tfjs'\r\nimport { Select, MenuItem, Input, InputLabel, FormControl } from '@material-ui/core'\r\nimport { useTensorflow } from '../context/Tensorflow'\r\nimport { LOSSES_FUNCTIONS, METRICS } from '../constants'\r\n\r\nexport default function ModelOptions() {\r\n    const {\r\n        modelSettings: { optimizer, optimizerOptions, loss, metric },\r\n        setOptimizer,\r\n        setOptimizerOption,\r\n        setLoss,\r\n        setMetric,\r\n    } = useTensorflow()\r\n\r\n    const learningAlgorithmOptions = Object.entries(optimizerOptions)\r\n\r\n    return (\r\n        <Container>\r\n            <Row>\r\n                <FormControl style={{ width: '100%' }}>\r\n                    <InputLabel id=\"Learning-algorithm-label\">Learning Algoritm</InputLabel>\r\n                    <Select\r\n                        labelId={'Learning-algorithm-label'}\r\n                        value={optimizer.name}\r\n                        onChange={(e) => {\r\n                            setOptimizer(e.target.value)\r\n                        }}\r\n                    >\r\n                        {Object.keys(train).map((method) => (\r\n                            <MenuItem value={method} key={method}>\r\n                                {method}\r\n                            </MenuItem>\r\n                        ))}\r\n                    </Select>\r\n                </FormControl>\r\n            </Row>\r\n            <Row style={{ flexWrap: 'wrap', justifyContent: 'start' }}>\r\n                {learningAlgorithmOptions.map(([key, value]) => (\r\n                    <FormControl key={key} style={{ maxWidth: '50%' }}>\r\n                        <InputLabel id={key}>{key}</InputLabel>\r\n                        {typeof value === 'number' && (\r\n                            <Input\r\n                                key={key}\r\n                                type=\"number\"\r\n                                value={optimizerOptions[key]}\r\n                                onInput={(e) => {\r\n                                    setOptimizerOption(key, e.target.valueAsNumber)\r\n                                }}\r\n                            />\r\n                        )}\r\n                        {typeof value === 'boolean' && (\r\n                            <Select\r\n                                value={optimizerOptions[key]}\r\n                                key={key}\r\n                                labelId={key}\r\n                                onChange={(e) => {\r\n                                    setOptimizerOption(key, e.target.value)\r\n                                }}\r\n                            >\r\n                                <MenuItem value={true}>True</MenuItem>\r\n                                <MenuItem value={false}>False</MenuItem>\r\n                            </Select>\r\n                        )}\r\n                    </FormControl>\r\n                ))}\r\n            </Row>\r\n            <Row>\r\n                <FormControl>\r\n                    <InputLabel id={'Metric'}>{'Metric'}</InputLabel>\r\n                    <Select\r\n                        id=\"Metric\"\r\n                        label=\"Metric\"\r\n                        value={metric}\r\n                        onChange={(e) => {\r\n                            setMetric(e.target.value)\r\n                        }}\r\n                    >\r\n                        {METRICS.map((value) => (\r\n                            <MenuItem value={value} key={value}>\r\n                                {value}\r\n                            </MenuItem>\r\n                        ))}\r\n                    </Select>\r\n                </FormControl>\r\n                <FormControl>\r\n                    <InputLabel id={'Loss'}>{'Loss'}</InputLabel>\r\n                    <Select\r\n                        id=\"Loss\"\r\n                        label=\"Loss\"\r\n                        value={loss}\r\n                        onChange={(e) => {\r\n                            setLoss(e.target.value)\r\n                        }}\r\n                    >\r\n                        {LOSSES_FUNCTIONS.map((value) => (\r\n                            <MenuItem value={value} key={value}>\r\n                                {value}\r\n                            </MenuItem>\r\n                        ))}\r\n                    </Select>\r\n                </FormControl>\r\n            </Row>\r\n        </Container>\r\n    )\r\n}\r\n\r\nconst Container = styled.div`\r\n    display: flex;\r\n    width: 100%;\r\n    flex-direction: column;\r\n    align-items: center;\r\n`\r\n","import jBinary from 'jbinary'\r\nimport MAT from './jMatFile'\r\n\r\nimport Papa, { ParseResult } from 'papaparse'\r\n\r\nconst toBase64 = (file: File) =>\r\n    new Promise((resolve, reject) => {\r\n        const reader = new FileReader()\r\n        reader.readAsDataURL(file)\r\n        reader.onload = () => resolve(reader.result)\r\n        reader.onerror = (error) => reject(error)\r\n    })\r\n\r\nexport const getDataFromMatFile = async (file: File) => {\r\n    /* const file64 = await toBase64(file)\r\n    var jb = new jBinary(file64, MAT)\r\n    const mat = jb.read('mat')\r\n    console.log(mat) */\r\n    /* fs.readFile(path, (err, data) => {\r\n        const jb = new jBinary(data, MAT)\r\n        const mat = jb.read('mat')\r\n        console.log(mat)\r\n    }) */\r\n    /* const file64 = await toBase64(file)\r\n\r\n    jBinary.load(file64, MAT).then((binary) => {\r\n        console.log(binary.readAll())\r\n    }) */\r\n}\r\n\r\nconst transposeMatrix = (matrix: number[][]) => {\r\n    return matrix.reduce(\r\n        (result, row) => {\r\n            row.forEach((element, i) => {\r\n                if (isNaN(element)) return\r\n                if (!result[i]) result.push([])\r\n                result[i].push(element)\r\n            })\r\n            return result\r\n        },\r\n        [[]] as number[][]\r\n    )\r\n}\r\n\r\nexport const getDataFromCSVFile: (\r\n    file: File | string\r\n) => Promise<{ data: { [key: string]: string | number }[]; fields?: string[] }> = async (file) => {\r\n    return new Promise((res, rej) => {\r\n        Papa.parse(file, {\r\n            complete: ({\r\n                data,\r\n                errors,\r\n                meta: { fields },\r\n            }: ParseResult<{ [key: string]: string | number }>) => {\r\n                if (errors.length) {\r\n                    console.log(errors)\r\n                    rej(errors)\r\n                } else res({ data, fields })\r\n            },\r\n            /*  transform: (value) => (!isNaN(parseFloat(value)) ? parseFloat(value) : value), */\r\n            header: true,\r\n            skipEmptyLines: true,\r\n            dynamicTyping: true,\r\n            transformHeader: (header: string, index: number) =>\r\n                isNaN(parseFloat(header)) ? header : index?.toString(),\r\n        })\r\n    })\r\n}\r\n","import React, { useState, useEffect, forwardRef, CSSProperties, ChangeEvent } from 'react'\r\nimport styled from 'styled-components/macro'\r\n\r\ninterface FileInputProps {\r\n    name: string\r\n    helperText?: string\r\n    style?: CSSProperties\r\n    onChange?: (e: ChangeEvent<HTMLInputElement>) => void\r\n}\r\n\r\nconst FileInput = forwardRef(\r\n    (\r\n        { name, helperText, style, onChange, ...props }: FileInputProps,\r\n        ref: React.ForwardedRef<HTMLInputElement>\r\n    ) => {\r\n        const [fileInputVisibility, setFileInputVis] = useState(false)\r\n        const [fileInputHover, setFileInputHover] = useState(false)\r\n\r\n        const handleBodyDrag = (e: DragEvent) => {\r\n            if (e.type === 'dragenter') setFileInputVis(true)\r\n            if (e.type === 'dragleave' && !e.relatedTarget) setFileInputVis(false)\r\n            if (e.type === 'drop') setFileInputVis(false)\r\n        }\r\n\r\n        useEffect(() => {\r\n            document.addEventListener('dragleave', handleBodyDrag)\r\n            document.addEventListener('dragenter', handleBodyDrag)\r\n            document.addEventListener('drop', handleBodyDrag)\r\n\r\n            return () => {\r\n                document.removeEventListener('dragenter', handleBodyDrag)\r\n                document.removeEventListener('dragleave', handleBodyDrag)\r\n                document.removeEventListener('drop', handleBodyDrag)\r\n            }\r\n        }, [])\r\n\r\n        return (\r\n            <>\r\n                <StyledInput\r\n                    {...props}\r\n                    ref={ref}\r\n                    $visibility={fileInputVisibility}\r\n                    name={name}\r\n                    id=\"file\"\r\n                    type=\"file\"\r\n                    accept=\".mat, .csv\"\r\n                    onChange={onChange}\r\n                    onDragEnter={() => {\r\n                        setFileInputHover(true)\r\n                    }}\r\n                    onDragLeave={() => {\r\n                        setFileInputHover(false)\r\n                    }}\r\n                />\r\n                <Label $visibility={fileInputVisibility} hover={fileInputHover} htmlFor={name}>\r\n                    {helperText}\r\n                </Label>\r\n            </>\r\n        )\r\n    }\r\n)\r\n\r\nexport default FileInput\r\n\r\nexport const FileInputWrapper = styled.div`\r\n    position: relative;\r\n`\r\n\r\nconst StyledInput = styled.input<{\r\n    readonly $visibility: boolean\r\n}>`\r\n    position: absolute;\r\n    left: 0;\r\n    top: 0;\r\n    opacity: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n\r\n    z-index: ${(props) => (props.$visibility ? '1' : '-1')};\r\n`\r\n\r\nconst Label = styled.label<{\r\n    readonly $visibility: boolean\r\n    readonly hover: boolean\r\n}>`\r\n    position: absolute;\r\n    left: 0;\r\n    top: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n    z-index: 2;\r\n    opacity: ${(props) => (props.$visibility ? '1' : '0')};\r\n    font-weight: bold;\r\n    border-radius: 0.5em;\r\n    pointer-events: none;\r\n\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    transition: color 0.3s, background-color 0.3s, opacity 0.3s;\r\n    color: var(--primary-color-contrastText);\r\n    background-color: ${(props) =>\r\n        props.hover ? 'var(--primary-color-light)' : ' var(--primary-color);'};\r\n`\r\n","import React, { useRef, useState, ChangeEvent } from 'react'\r\nimport { getDataFromCSVFile } from '../../util/dataConverter'\r\nimport { Button } from '@material-ui/core'\r\nimport FileInput from '../../components/FileInput'\r\n\r\nimport { dataSubFormProps } from './DataForm'\r\n\r\nexport default function DataFromDiskForm({ setData, setFields }: dataSubFormProps) {\r\n    const inputRef = useRef<HTMLInputElement>(null)\r\n\r\n    const [fileName, setFileName] = useState<string>()\r\n\r\n    const handleUpload = async (e: ChangeEvent<HTMLInputElement>) => {\r\n        const file = e.target.files?.item(0)\r\n        if (file) {\r\n            setFileName(file?.name)\r\n            const { data, fields } = await getDataFromCSVFile(file)\r\n            setFields(fields)\r\n            setData(data)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <FileInput\r\n                name={'training Data'}\r\n                helperText=\"drop data here\"\r\n                ref={inputRef}\r\n                onChange={handleUpload}\r\n            />\r\n            <Button\r\n                variant=\"contained\"\r\n                size=\"small\"\r\n                color=\"primary\"\r\n                onClick={() => {\r\n                    inputRef.current?.click()\r\n                }}\r\n            >\r\n                Load from disk\r\n            </Button>\r\n        </>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\n\r\nimport { dataSubFormProps } from './DataForm'\r\nimport { Row } from '../../components/Layout'\r\nimport { Button } from '@material-ui/core'\r\nimport TextField from '@material-ui/core/TextField'\r\n\r\nimport { getDataFromCSVFile } from '../../util/dataConverter'\r\n\r\nconst getDataType = (url: string) => {\r\n    return url.split('.').reverse()[0]\r\n}\r\n\r\nexport default function DataFromURLForm({ setFields, setData }: dataSubFormProps) {\r\n    const [URL, setURL] = useState('https://storage.googleapis.com/tfjs-tutorials/carsData.json')\r\n\r\n    const handleClick = async () => {\r\n        const res = await fetch(URL, {})\r\n        const type = getDataType(URL)\r\n        if (type === 'json') {\r\n            const data = await res.json()\r\n            const fields = Object.keys(data[0])\r\n            setFields(fields)\r\n            setData(data)\r\n        }\r\n        if (type === 'csv') {\r\n            const { data, fields } = await getDataFromCSVFile(await res.text())\r\n            setFields(fields)\r\n            setData(data)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Row style={{ alignItems: 'center', justifyContent: 'center' }}>\r\n            <TextField\r\n                id=\"URL-Fetch\"\r\n                label=\"URL\"\r\n                type=\"search\"\r\n                variant=\"outlined\"\r\n                margin=\"dense\"\r\n                fullWidth\r\n                value={URL}\r\n                onChange={(e) => setURL(e.target.value)}\r\n            />\r\n            <Button onClick={handleClick}>Load</Button>\r\n        </Row>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { Row, Column } from '../../components/Layout'\r\nimport { IconButton, IconButtonProps, MenuItem, useTheme } from '@material-ui/core'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport AddIcon from '@material-ui/icons/Add'\r\nimport DeleteIcon from '@material-ui/icons/Delete'\r\nimport { DataObject } from '../../context/Data'\r\nimport { useEffect } from 'react'\r\n\r\nexport default function ChooseInputOutput({\r\n    fields,\r\n    data,\r\n    dataContext,\r\n}: {\r\n    fields: string[]\r\n    data: { [key: string]: any }[]\r\n    dataContext: DataObject\r\n}) {\r\n    const [labels, setLabels] = useState<string[]>(\r\n        dataContext.inputs.keys.length ? dataContext.inputs.keys : ['']\r\n    )\r\n    const [inputs, setInputs] = useState<string[]>(\r\n        dataContext.labels.keys.length ? dataContext.labels.keys : ['']\r\n    )\r\n\r\n    useEffect(() => {\r\n        const inputToRemove = dataContext.inputs.keys.find((key) => !inputs.includes(key))\r\n        const labelToRemove = dataContext.labels.keys.find((key) => !labels.includes(key))\r\n\r\n        dataContext.removeInput(inputToRemove)\r\n        dataContext.removeLabel(labelToRemove)\r\n\r\n        const inputToAdd = inputs.find((key) => !dataContext.inputs.keys.includes(key))\r\n        const labelToAdd = labels.find((key) => !dataContext.labels.keys.includes(key))\r\n\r\n        if (inputToAdd) dataContext.addInput({ [inputToAdd]: data.map((obj) => obj[inputToAdd]) })\r\n        if (labelToAdd) dataContext.addLabel({ [labelToAdd]: data.map((obj) => obj[labelToAdd]) })\r\n    }, [data, inputs, labels, dataContext, dataContext.inputs.keys, dataContext.labels.keys])\r\n\r\n    return (\r\n        <Row style={{ alignItems: 'flex-start' }}>\r\n            <VectorColumn list={inputs} setList={setInputs} fields={fields} title={'inputs'} />\r\n            <VectorColumn list={labels} setList={setLabels} fields={fields} title={'labels'} />\r\n        </Row>\r\n    )\r\n}\r\n\r\nconst VectorColumn = ({\r\n    list,\r\n    setList,\r\n    fields,\r\n    title,\r\n}: {\r\n    setList: React.Dispatch<React.SetStateAction<string[]>>\r\n    list: string[]\r\n    fields: string[]\r\n    title: string\r\n}) => {\r\n    const [hover, setHover] = useState(false)\r\n\r\n    const handleAdd = () => {\r\n        setList((prev) => [...prev, ''])\r\n    }\r\n\r\n    const handleDelete = (i: number) => {\r\n        setList((prev) => {\r\n            prev.splice(i, 1)\r\n            return [...prev]\r\n        })\r\n    }\r\n\r\n    return (\r\n        <Column\r\n            onMouseEnter={() => setHover(true)}\r\n            onMouseLeave={() => setHover(false)}\r\n            style={{ width: '100%', position: 'relative' }}\r\n        >\r\n            <header>{title}</header>\r\n            {list.map((label, i) => (\r\n                <TextFieldContainer key={i} handleDelete={() => handleDelete(i)}>\r\n                    <TextField\r\n                        id=\"select-label\"\r\n                        value={label}\r\n                        fullWidth\r\n                        select\r\n                        onChange={(e) =>\r\n                            setList((prev) => {\r\n                                prev[i] = e.target.value as string\r\n                                return [...prev]\r\n                            })\r\n                        }\r\n                    >\r\n                        {fields.map((field) => (\r\n                            <MenuItem value={field} key={field}>\r\n                                {field}\r\n                            </MenuItem>\r\n                        ))}\r\n                    </TextField>\r\n                </TextFieldContainer>\r\n            ))}\r\n            <AddButton size=\"small\" visible={hover} onClick={handleAdd}></AddButton>\r\n        </Column>\r\n    )\r\n}\r\n\r\nconst TextFieldContainer = ({\r\n    children,\r\n    handleDelete,\r\n}: React.ComponentProps<'div'> & { handleDelete: () => void }) => {\r\n    const [hover, setHover] = useState(false)\r\n\r\n    return (\r\n        <div\r\n            style={{\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n                position: 'relative',\r\n                minWidth: '200px',\r\n            }}\r\n            onMouseEnter={() => setHover(true)}\r\n            onMouseLeave={() => setHover(false)}\r\n        >\r\n            <IconButton\r\n                size=\"small\"\r\n                style={{\r\n                    transform: `${hover ? 'scale(0.9)' : 'scale(0)'}`,\r\n                    transition: 'transform .3s',\r\n                }}\r\n                onClick={handleDelete}\r\n            >\r\n                <DeleteIcon />\r\n            </IconButton>\r\n\r\n            {children}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst AddButton = ({ visible, ...props }: IconButtonProps & { visible: boolean }) => {\r\n    const {\r\n        palette: {\r\n            secondary: { contrastText },\r\n        },\r\n        shadows,\r\n    } = useTheme()\r\n\r\n    return (\r\n        <IconButton\r\n            {...props}\r\n            style={{\r\n                position: 'absolute',\r\n                bottom: 0,\r\n                transform: `translateY(40%) ${visible ? 'scale(0.9)' : 'scale(0)'}`,\r\n                boxShadow: shadows[1],\r\n                backgroundColor: contrastText,\r\n                transition: 'transform .3s',\r\n            }}\r\n        >\r\n            <AddIcon />\r\n        </IconButton>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\nimport StyledCard, { StyledCardHeader } from '../../components/StyledCard'\r\nimport { Row } from '../../components/Layout'\r\n\r\nimport { Button, ButtonGroup } from '@material-ui/core'\r\n\r\nimport DataFromDiskForm from './DataFromDiskForm'\r\nimport DataFromURLForm from './DataFromURLForm'\r\nimport ChooseInputOutputs from './ChooseInputOutputs'\r\nimport { useData } from '../../context/Data'\r\nimport MathFunctionGenerator from './MathFunctionGenerator'\r\n\r\nenum formState {\r\n    FILE = 'Load from disk',\r\n    URL = 'Load from URL',\r\n    MATH = 'Generate math func',\r\n}\r\n\r\nexport interface dataSubFormProps {\r\n    setFields: (fileds: string[] | undefined) => void\r\n    setData: (data: { [key: string]: string | number }[]) => void\r\n}\r\n\r\ninterface DataFormProps {\r\n    whichData: 'learningData' | 'evaluationData'\r\n    header: string\r\n}\r\n\r\nfunction DataForm({ whichData, header }: DataFormProps) {\r\n    const dataContext = useData()\r\n\r\n    const [method, setMethod] = useState(formState.FILE)\r\n\r\n    const [fields, setFields] = useState<string[] | undefined>()\r\n    const [data, setData] = useState<{ [key: string]: any }[]>([{}])\r\n\r\n    return (\r\n        <StyledCard>\r\n            <StyledCardHeader>\r\n                <h2>{header}</h2>\r\n            </StyledCardHeader>\r\n            <Row>\r\n                <ButtonGroup variant=\"contained\" size=\"small\" color=\"primary\">\r\n                    {Object.values(formState).map((value) => (\r\n                        <Button\r\n                            key={value}\r\n                            variant={'text'}\r\n                            disabled={method === value}\r\n                            size=\"small\"\r\n                            color=\"primary\"\r\n                            onClick={() => {\r\n                                setMethod(value)\r\n                                setFields(undefined)\r\n                            }}\r\n                        >\r\n                            {value}\r\n                        </Button>\r\n                    ))}\r\n                </ButtonGroup>\r\n            </Row>\r\n            <Row>\r\n                {method === formState.FILE && (\r\n                    <DataFromDiskForm setData={setData} setFields={setFields} />\r\n                )}\r\n                {method === formState.URL && (\r\n                    <DataFromURLForm setData={setData} setFields={setFields} />\r\n                )}\r\n                {method === formState.MATH && (\r\n                    <MathFunctionGenerator dataContext={dataContext[whichData]} />\r\n                )}\r\n            </Row>\r\n            {fields && (\r\n                <ChooseInputOutputs\r\n                    fields={fields}\r\n                    data={data}\r\n                    dataContext={dataContext[whichData]}\r\n                />\r\n            )}\r\n        </StyledCard>\r\n    )\r\n}\r\n\r\nexport default DataForm\r\n","const DEFAULT_MIN = 0\r\nconst DEFAULT_MAX = 50\r\nconst DEFAULT_LENGTH = 50\r\n\r\nconst getNoise = (level: number) => Math.random() * 2 * level - level\r\n\r\nconst getXs = (min: number, max: number, length: number) => {\r\n    if (length <= 0) throw new Error('length of a data vector must be a positive number')\r\n    return new Array(length).fill(0).map((x, i) => (i / length) * (max - min) + min)\r\n}\r\n\r\nconst mathFunctionGenerator = {\r\n    /**\r\n     * y = a * x + b + noise\r\n     */\r\n    linear: (params: {\r\n        a: number\r\n        b: number\r\n        noise?: number\r\n        min?: number\r\n        max?: number\r\n        length?: number\r\n    }) => {\r\n        const {\r\n            a,\r\n            b,\r\n            noise = 0,\r\n            min = DEFAULT_MIN,\r\n            max = DEFAULT_MAX,\r\n            length = DEFAULT_LENGTH,\r\n        } = params\r\n        return getXs(min, max, length).map((x) => ({ x, y: x * a + b + getNoise(noise) }))\r\n    },\r\n    /**\r\n     * y = (a + noise)^x\r\n     */\r\n    exp: (params?: { a?: number; noise?: number; min: number; max: number; length: number }) => {\r\n        const {\r\n            a = Math.E,\r\n            noise = 0,\r\n            min = DEFAULT_MIN,\r\n            max = DEFAULT_MAX,\r\n            length = DEFAULT_LENGTH,\r\n        } = params || {}\r\n        return getXs(min, max, length).map((x) => ({ x, y: Math.pow(a + getNoise(noise), x) }))\r\n    },\r\n    sin: (params: {\r\n        a: number\r\n        w: number\r\n        noise?: number\r\n        min: number\r\n        max: number\r\n        length: number\r\n    }) => {\r\n        const {\r\n            a,\r\n            w,\r\n            noise = 0,\r\n            min = DEFAULT_MIN,\r\n            max = DEFAULT_MAX,\r\n            length = DEFAULT_LENGTH,\r\n        } = params\r\n        return getXs(min, max, length).map((x) => ({\r\n            x,\r\n            y: a * (Math.sin(x * (1 / w) * (2 * Math.PI)) + getNoise(noise)),\r\n        }))\r\n    },\r\n    gauss: (params: {\r\n        a: number\r\n        sigma: number\r\n        noise?: number\r\n        min: number\r\n        max: number\r\n        length: number\r\n    }) => {\r\n        const {\r\n            a,\r\n            sigma,\r\n            noise = 0,\r\n            min = DEFAULT_MIN,\r\n            max = DEFAULT_MAX,\r\n            length = DEFAULT_LENGTH,\r\n        } = params\r\n        return getXs(min, max, length).map((x) => ({\r\n            x,\r\n            y:\r\n                (1 / Math.sqrt(2 * Math.PI * sigma * sigma)) *\r\n                    Math.exp(-Math.pow(x - a, 2) / (2 * sigma * sigma)) +\r\n                getNoise(noise),\r\n        }))\r\n    },\r\n}\r\n\r\nconst defaultParams = ['noise', 'min', 'max', 'length']\r\n\r\nexport const paramMap = {\r\n    linear: ['a', 'b'].concat(defaultParams),\r\n    exp: ['a'].concat(defaultParams),\r\n    sin: ['a', 'w'].concat(defaultParams),\r\n    gauss: ['a', 'sigma'].concat(defaultParams),\r\n}\r\n\r\nexport const defaults = {\r\n    linear: {\r\n        a: 1,\r\n        b: 1,\r\n        noise: 0,\r\n        min: DEFAULT_MIN,\r\n        max: DEFAULT_MAX,\r\n        length: DEFAULT_LENGTH,\r\n    },\r\n    exp: {\r\n        a: Math.E,\r\n        noise: 0,\r\n        min: DEFAULT_MIN,\r\n        max: DEFAULT_MAX,\r\n        length: DEFAULT_LENGTH,\r\n    },\r\n    sin: {\r\n        a: 1,\r\n        w: 25,\r\n        noise: 0,\r\n        min: DEFAULT_MIN,\r\n        max: DEFAULT_MAX,\r\n        length: DEFAULT_LENGTH,\r\n    },\r\n    gauss: {\r\n        a: 10,\r\n        sigma: 3,\r\n        noise: 0,\r\n        min: DEFAULT_MIN,\r\n        max: DEFAULT_MAX,\r\n        length: DEFAULT_LENGTH,\r\n    },\r\n}\r\n\r\nexport default mathFunctionGenerator\r\n","import React, { ChangeEvent, useState } from 'react'\r\nimport { DataObject } from '../../context/Data'\r\nimport mathFunctionGenerator, { paramMap, defaults } from '../../util/mathFunctionGenerator'\r\nimport { Button, ButtonGroup, TextField } from '@material-ui/core'\r\nimport { Row, Column } from '../../components/Layout'\r\n\r\ninterface mathFunctionGeneratoProps {\r\n    dataContext: DataObject\r\n}\r\n\r\ntype funcUnion = keyof typeof paramMap\r\n\r\nconst FUNC = Object.keys(paramMap) as funcUnion[]\r\n\r\nexport default function MathFunctionGenerator({ dataContext }: mathFunctionGeneratoProps) {\r\n    const [func, setFunction] = useState<funcUnion>(FUNC[0])\r\n    const [params, setParams] = useState<{ [key: string]: number }>(defaults[FUNC[0]])\r\n\r\n    return (\r\n        <Column>\r\n            <ButtonGroup variant=\"contained\" size=\"small\" color=\"primary\">\r\n                {FUNC.map((value) => (\r\n                    <Button\r\n                        key={value}\r\n                        variant={'text'}\r\n                        disabled={func === value}\r\n                        size=\"small\"\r\n                        color=\"primary\"\r\n                        onClick={() => {\r\n                            setFunction(value)\r\n                            setParams(defaults[value])\r\n                        }}\r\n                    >\r\n                        {value}\r\n                    </Button>\r\n                ))}\r\n            </ButtonGroup>\r\n            <Row>\r\n                {paramMap[func].map((param) => (\r\n                    <TextField\r\n                        key={param}\r\n                        id={param}\r\n                        label={param}\r\n                        type=\"number\"\r\n                        value={params[param].toString()}\r\n                        onChange={(e: ChangeEvent<HTMLInputElement>) => {\r\n                            setParams((prev) => ({ ...prev, [param]: e.target.valueAsNumber }))\r\n                        }}\r\n                    />\r\n                ))}\r\n            </Row>\r\n            <Button\r\n                onClick={() => {\r\n                    const generated = mathFunctionGenerator[func](params as any)\r\n                    dataContext.addInput({ x: generated.map(({ x }) => x) })\r\n                    dataContext.addLabel({ y: generated.map(({ y }) => y) })\r\n                }}\r\n            >\r\n                Ok\r\n            </Button>\r\n        </Column>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport DataForm from './dataForm/DataForm'\r\n\r\nexport default function TrainingDataForm() {\r\n    return <DataForm whichData={'learningData'} header={'learning data'}/>\r\n}\r\n","import React from 'react'\r\n\r\nimport DataForm from './dataForm/DataForm'\r\n\r\nexport default function TrainingDataForm() {\r\n    return <DataForm whichData={'evaluationData'} header={'evaluation data'} />\r\n}\r\n","import { Checkbox, FormControlLabel, TextField } from '@material-ui/core'\r\nimport { Row } from '../components/Layout'\r\nimport { useTensorflow } from '../context/Tensorflow'\r\n\r\nexport default function LearningSettings() {\r\n    const {\r\n        learningSettings: { batchSize, epochs, normalize },\r\n        setLearningOption,\r\n    } = useTensorflow()\r\n\r\n    return (\r\n        <>\r\n            <Row>\r\n                <TextField\r\n                    id=\"Epochs\"\r\n                    label=\"Epochs\"\r\n                    type=\"number\"\r\n                    value={epochs.toString()}\r\n                    onChange={(e) => {\r\n                        setLearningOption({ epochs: e.target.valueAsNumber })\r\n                    }}\r\n                />\r\n                <TextField\r\n                    id=\"BatchSize\"\r\n                    label=\"BatchSize\"\r\n                    type=\"number\"\r\n                    value={batchSize.toString()}\r\n                    onChange={(e) => {\r\n                        setLearningOption({ batchSize: e.target.valueAsNumber })\r\n                    }}\r\n                />\r\n                <FormControlLabel\r\n                    control={\r\n                        <Checkbox\r\n                            color=\"primary\"\r\n                            checked={normalize}\r\n                            onChange={() => {\r\n                                setLearningOption({ normalize: !normalize })\r\n                            }}\r\n                            name=\"Normalize\"\r\n                        />\r\n                    }\r\n                    label=\"Normalize data\"\r\n                />\r\n            </Row>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport MenuItem from '@material-ui/core/MenuItem'\r\nimport Menu from '@material-ui/core/Menu'\r\n\r\ninterface PopMenuProps {\r\n    options: string[]\r\n    handleClose: () => void\r\n    onChange: (value: string) => void\r\n    open: boolean\r\n    anchorEl: HTMLElement | null | undefined\r\n    value: string | undefined\r\n}\r\n\r\nexport default function PopMenu({\r\n    options,\r\n    handleClose,\r\n    open,\r\n    anchorEl,\r\n    value,\r\n    onChange,\r\n}: PopMenuProps) {\r\n    return (\r\n        <Menu id=\"simple-menu\" anchorEl={anchorEl} keepMounted open={open} onClose={handleClose}>\r\n            {options.map((op) => (\r\n                <MenuItem\r\n                    onClick={() => {\r\n                        onChange(op)\r\n                        handleClose()\r\n                    }}\r\n                    selected={op === value}\r\n                >\r\n                    {op}\r\n                </MenuItem>\r\n            ))}\r\n        </Menu>\r\n    )\r\n}\r\n","import React, { useRef, useCallback, useEffect, forwardRef, useState } from 'react'\r\nimport styled from 'styled-components'\r\n\r\nimport { Chart, registerables } from 'chart.js'\r\nimport type { ChartOptions, ChartData, ChartType } from 'chart.js'\r\nimport PopMenu from './PopMenu'\r\n\r\nChart.register(...registerables)\r\nexport interface ChartProps {\r\n    data: ChartData\r\n    options: ChartOptions\r\n    type?: ChartType\r\n    id: string\r\n    xkeys?: string[]\r\n    ykeys?: string[]\r\n}\r\n\r\nconst plugin = {\r\n    id: 'custom_canvas_background_color',\r\n    beforeDraw: (chart: Chart) => {\r\n        const ctx = chart.canvas.getContext('2d')!\r\n        const color = '#fff'\r\n\r\n        ctx.save()\r\n        ctx.globalCompositeOperation = 'destination-over'\r\n        ctx.fillStyle = color ? color : 'transparent'\r\n        ctx.fillRect(0, 0, chart.width, chart.height)\r\n        ctx.restore()\r\n    },\r\n}\r\n\r\n/**\r\n * React Component wrapper for Chart.js , more on usage and props on: https://www.chartjs.org/docs/latest/\r\n *\r\n * default chart type is \"scatter\"\r\n */\r\nexport default forwardRef<HTMLCanvasElement, ChartProps>(function ChartComponent(\r\n    { data, options, type = 'scatter', id, ykeys, xkeys, ...props },\r\n    ref\r\n) {\r\n    const chartInstance = useRef<Chart>({\r\n        update: () => {},\r\n        destroy: () => {},\r\n    } as Chart)\r\n\r\n    if (!id) console.warn('id must be provided on chart component')\r\n\r\n    useEffect(() => {\r\n        if (chartInstance.current) {\r\n            chartInstance.current.data = data\r\n            chartInstance.current.update('normal')\r\n        }\r\n    }, [data])\r\n\r\n    const [xAxisKey, setXAxisKey] = useState<string>()\r\n    const [yAxisKey, setYAxisKey] = useState<string>()\r\n\r\n    useEffect(() => {\r\n        if (xkeys && xkeys.length) setXAxisKey(xkeys[xkeys?.length - 1])\r\n    }, [xkeys])\r\n\r\n    useEffect(() => {\r\n        if (ykeys && ykeys.length) setYAxisKey(ykeys[ykeys?.length - 1])\r\n    }, [ykeys])\r\n\r\n    const [xOptions, setXOptions] = useState(false)\r\n    const [yOptions, setYOptions] = useState(false)\r\n    const xButton = useRef(null)\r\n    const yButton = useRef(null)\r\n\r\n    const canvasRef = useCallback<(instance: HTMLCanvasElement | null) => void>(\r\n        (reference) => {\r\n            chartInstance.current.destroy()\r\n\r\n            if (reference) {\r\n                const chart = new Chart(reference, {\r\n                    type,\r\n                    data,\r\n                    options: {\r\n                        parsing: {\r\n                            xAxisKey,\r\n                            yAxisKey,\r\n                        },\r\n                        scales: {\r\n                            x: {\r\n                                title: {\r\n                                    display: true,\r\n                                    text: xAxisKey,\r\n                                    font: {\r\n                                        size: 10,\r\n                                    },\r\n                                },\r\n                            },\r\n                            y: {\r\n                                title: {\r\n                                    display: true,\r\n                                    text: yAxisKey,\r\n                                    font: {\r\n                                        size: 10,\r\n                                    },\r\n                                },\r\n                            },\r\n                        },\r\n                        ...options,\r\n                    },\r\n                    plugins: [plugin],\r\n                })\r\n                chartInstance.current = chart\r\n            }\r\n        },\r\n        [data, options, type, xAxisKey, yAxisKey]\r\n    )\r\n\r\n    return (\r\n        <div style={{ position: 'relative', width: '100%' }}>\r\n            {ykeys && ykeys?.length > 1 && (\r\n                <>\r\n                    <InvisibleButton\r\n                        style={{ width: '2em', height: '80%', left: 0, top: 0 }}\r\n                        ref={yButton}\r\n                        onClick={() => setYOptions(true)}\r\n                    ></InvisibleButton>\r\n                    <PopMenu\r\n                        anchorEl={yButton.current}\r\n                        onChange={(v) => setYAxisKey(v)}\r\n                        value={yAxisKey}\r\n                        handleClose={() => setYOptions(false)}\r\n                        options={ykeys}\r\n                        open={yOptions}\r\n                    />\r\n                </>\r\n            )}\r\n            {xkeys && xkeys?.length > 1 && (\r\n                <>\r\n                    <InvisibleButton\r\n                        style={{ width: '80%', height: '2em', right: 0, bottom: 0 }}\r\n                        ref={xButton}\r\n                        onClick={() => setXOptions(true)}\r\n                    ></InvisibleButton>\r\n                    <PopMenu\r\n                        anchorEl={xButton.current}\r\n                        onChange={(v) => setXAxisKey(v)}\r\n                        value={xAxisKey}\r\n                        handleClose={() => setXOptions(false)}\r\n                        options={xkeys}\r\n                        open={xOptions}\r\n                    />\r\n                </>\r\n            )}\r\n            <canvas ref={canvasRef} id={id}></canvas>\r\n        </div>\r\n    )\r\n})\r\n\r\nconst InvisibleButton = styled.button`\r\n    opacity: 0;\r\n    position: absolute;\r\n    padding: 0;\r\n    cursor: pointer;\r\n`\r\n\r\nexport { Chart }\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nimport ChartComponent, { Chart } from '../components/Chart'\r\nimport { ChartContainerProps } from './ChartContainer'\r\n\r\nimport Modal, { ModalProps } from '@material-ui/core/Modal'\r\nimport StyledCard from '../components/StyledCard'\r\nimport Fade from '@material-ui/core/Fade'\r\nimport Backdrop from '@material-ui/core/Backdrop'\r\nimport { Button } from '@material-ui/core'\r\n\r\ninterface ChartFullScreenProps extends Pick<ModalProps, 'open' | 'onClose'>, ChartContainerProps {\r\n    id: string\r\n}\r\n\r\nexport default function ChartFullScreen({\r\n    id,\r\n    open,\r\n    onClose,\r\n    title,\r\n    options,\r\n    data,\r\n    type,\r\n    xkeys,\r\n    ykeys,\r\n}: ChartFullScreenProps) {\r\n    const MODAL_CHART_ID = `${id}-modal`\r\n\r\n    const downloadPicture = () => {\r\n        const chart = Chart.getChart(MODAL_CHART_ID)\r\n        const image = chart!.toBase64Image('image/jpeg')\r\n\r\n        const downloadLink = document.createElement('a')\r\n        downloadLink.href = image!\r\n        downloadLink.download = title\r\n        downloadLink.click()\r\n    }\r\n\r\n    return (\r\n        <StyledModal\r\n            open={open}\r\n            onClose={onClose}\r\n            closeAfterTransition\r\n            BackdropComponent={Backdrop}\r\n            BackdropProps={{\r\n                timeout: 400,\r\n            }}\r\n        >\r\n            <Fade in={open} timeout={400}>\r\n                <ModalCard>\r\n                    <Header>{title && <h2>{title}</h2>}</Header>\r\n                    <ChartComponent\r\n                        data={data}\r\n                        options={options}\r\n                        id={MODAL_CHART_ID}\r\n                        type={type}\r\n                        xkeys={xkeys}\r\n                        ykeys={ykeys}\r\n                    />\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        onClick={() => downloadPicture()}\r\n                        style={{ margin: '1em' }}\r\n                    >\r\n                        Download Image\r\n                    </Button>\r\n                </ModalCard>\r\n            </Fade>\r\n        </StyledModal>\r\n    )\r\n}\r\n\r\nconst ModalCard = styled(StyledCard)`\r\n    max-width: unset;\r\n    width: 80vw;\r\n`\r\n\r\nconst StyledModal = styled(Modal)`\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n`\r\nconst Header = styled.header`\r\n    display: flex;\r\n    width: 100%;\r\n`\r\n","import React, { useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport ChartComponent, { ChartProps, Chart } from './Chart'\r\nimport FullscreenIcon from '@material-ui/icons/Fullscreen'\r\nimport IconButton from '@material-ui/core/IconButton'\r\n// import SettingsIcon from '@material-ui/icons/Settings'\r\n\r\nimport ChartFullScreen from './ChartFullScreen'\r\nimport useChartData from '../hooks/useChartData'\r\n// import useDeepEquality from '../hooks/useDeepEquality'\r\n\r\n/* import Modal from '@material-ui/core/Modal'\r\nimport StyledCard from '../components/StyledCard'\r\nimport Fade from '@material-ui/core/Fade'\r\nimport Backdrop from '@material-ui/core/Backdrop'\r\nimport { Select, MenuItem, Input, InputLabel, FormControl } from '@material-ui/core' */\r\n\r\nexport interface ChartContainerProps extends ChartProps {\r\n    title: string\r\n}\r\n\r\nexport default function ChartContainer({\r\n    title,\r\n    data,\r\n    options,\r\n    type,\r\n    id,\r\n    xkeys,\r\n    ykeys,\r\n    ...props\r\n}: ChartContainerProps) {\r\n    const [modalOpen, setModaleOpen] = useState(false)\r\n    // const [settingsOpen, setSettingsOpen] = useState(false)\r\n\r\n    const chartData = useChartData(data)\r\n\r\n    return (\r\n        <>\r\n            <Container {...props}>\r\n                <Header>\r\n                    {title && <h3>{title}</h3>}\r\n                    {/*  <IconButton\r\n                        size=\"small\"\r\n                        color=\"inherit\"\r\n                        style={{ marginLeft: 'auto' }}\r\n                        onClick={() => setSettingsOpen(true)}\r\n                    >\r\n                        <SettingsIcon />\r\n                    </IconButton> */}\r\n                    <IconButton\r\n                        size=\"small\"\r\n                        color=\"inherit\"\r\n                        style={{ marginLeft: 'auto' }}\r\n                        onClick={() => setModaleOpen(true)}\r\n                    >\r\n                        <FullscreenIcon />\r\n                    </IconButton>\r\n                </Header>\r\n                <ChartComponent\r\n                    data={chartData}\r\n                    options={options}\r\n                    id={id}\r\n                    type={type}\r\n                    xkeys={xkeys}\r\n                    ykeys={ykeys}\r\n                />\r\n            </Container>\r\n            <ChartFullScreen\r\n                title={title}\r\n                data={chartData}\r\n                options={options}\r\n                id={id}\r\n                open={modalOpen}\r\n                type={type}\r\n                onClose={() => setModaleOpen(false)}\r\n                xkeys={xkeys}\r\n                ykeys={ykeys}\r\n            />\r\n            {/*  <Modal\r\n                open={settingsOpen}\r\n                onClose={() => setSettingsOpen(false)}\r\n                closeAfterTransition\r\n                BackdropComponent={Backdrop}\r\n                BackdropProps={{\r\n                    timeout: 400,\r\n                }}\r\n                style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}\r\n            >\r\n                <Fade in={settingsOpen} timeout={400}>\r\n                    <StyledCard>\r\n                        <Header>{title && <h2>{title} chart options</h2>}</Header>\r\n                        <Select\r\n                            labelId={'x'}\r\n                            value={options.scales.x.title}\r\n                            onChange={(e) => {\r\n                                setOptimizer(e.target.value)\r\n                            }}\r\n                        >\r\n                            {.map((value) => (\r\n                                <MenuItem value={value} key={value}>\r\n                                    {value}\r\n                                </MenuItem>\r\n                            ))}\r\n                        </Select>\r\n                    </StyledCard>\r\n                </Fade>\r\n            </Modal> */}\r\n        </>\r\n    )\r\n}\r\n\r\nconst Container = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    width: 100%;\r\n    padding: 0.5em;\r\n    /*  align-items: center; */\r\n\r\n    color: var(--secondary-font-color);\r\n`\r\n\r\nconst Header = styled.header`\r\n    display: flex;\r\n    width: 100%;\r\n`\r\n\r\nconst InvisibleButton = styled.button`\r\n    opacity: 0;\r\n    position: absolute;\r\n    padding: 0;\r\n    cursor: pointer;\r\n`\r\n","import { useState, useEffect } from 'react'\r\nimport type { ChartData } from 'chart.js'\r\nimport deepEqual from 'deep-equal'\r\n\r\n// useDeepEquality but more specific\r\n// might swap for more generic in the future\r\n\r\n/**\r\n * updates data only when something changes according to deep equality\r\n *\r\n * normally react compares props with Object.is() algorithm,\r\n * which returns true only if compared objects are the same object in memory\r\n * for example {} === {} is false\r\n * deep equality on the other hand in example above qould return true because compared objects are composed from same values\r\n * */\r\nexport default function useChartData(data: ChartData) {\r\n    const [chartData, setChartData] = useState<ChartData>(data)\r\n\r\n    useEffect(() => {\r\n        const shouldUpdate = !deepEqual(chartData.datasets, data.datasets)\r\n        if (shouldUpdate) setChartData(data)\r\n    }, [data, chartData])\r\n\r\n    return chartData\r\n}\r\n","import { useTheme } from '@material-ui/core'\r\nimport React from 'react'\r\n\r\nexport default function ErrorMessage({ children, ...props }: React.ComponentProps<'div'>) {\r\n    const {\r\n        palette: {\r\n            error: { main: color },\r\n        },\r\n    } = useTheme()\r\n\r\n    return <div style={{ color, margin: '1em' }}>{children}</div>\r\n}\r\n","import React, { useState } from 'react'\r\n\r\nimport { Button } from '@material-ui/core'\r\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow'\r\nimport PauseIcon from '@material-ui/icons/Pause'\r\n\r\nimport StyledCard, { StyledCardHeader } from '../components/StyledCard'\r\nimport { Row } from '../components/Layout'\r\nimport { useTheme } from '@material-ui/core/styles'\r\n\r\nimport { onEpochEndCallback, useTensorflow } from '../context/Tensorflow'\r\nimport { useData } from '../context/Data'\r\nimport LearningSettings from './LearningSettings'\r\nimport ChartContainer from '../components/ChartContainer'\r\nimport ErrorMessage from '../components/ErrorMessage'\r\n\r\nexport default function TrainingSection() {\r\n    const [errors, setErrors] = useState<Error>()\r\n\r\n    const {\r\n        trainModel,\r\n        stopTraining,\r\n        isCompiled,\r\n        isTraining,\r\n        modelSettings: { metric },\r\n        learningSettings: { epochs },\r\n    } = useTensorflow()\r\n\r\n    const [trainingLogs, setTrainingLogs] = useState<{ [key: string]: number }[]>([])\r\n    const [trainingValLogs, setTrainingValLogs] = useState<{ [key: string]: number }[]>([])\r\n    const [trainingEffects, setTrainingEffects] = useState<{ [key: string]: number }[]>([])\r\n\r\n    const { learningData } = useData()\r\n\r\n    const {\r\n        palette: {\r\n            primary: { main: MainColor },\r\n            secondary: { main: SecondaryColor },\r\n        },\r\n    } = useTheme()\r\n\r\n    const onEpochEndCallback: onEpochEndCallback = async ({ metric, val }, currentPrediction) => {\r\n        setTrainingLogs((prev) => [...prev, metric])\r\n        setTrainingValLogs((prev) => [...prev, val])\r\n        setTrainingEffects(currentPrediction)\r\n    }\r\n\r\n    const onTrainBeginCallback = () => {\r\n        setTrainingLogs([])\r\n        setTrainingValLogs([])\r\n        setTrainingEffects([])\r\n    }\r\n\r\n    const handleTrainModel = async () => {\r\n        try {\r\n            await trainModel({ onEpochEndCallback, onTrainBeginCallback })\r\n        } catch (error) {\r\n            setErrors(error)\r\n        }\r\n    }\r\n    return (\r\n        <StyledCard>\r\n            <ChartContainer\r\n                title={'Data Visualization'}\r\n                id={'Data Visualization'}\r\n                data={{\r\n                    datasets: [\r\n                        {\r\n                            data: learningData.scatter as any,\r\n                            label: 'Learning data',\r\n                        },\r\n                        {\r\n                            data: trainingEffects as any,\r\n                            label: 'Prediction',\r\n                            showLine: true,\r\n                            backgroundColor: SecondaryColor,\r\n                            borderColor: SecondaryColor,\r\n                            pointRadius: 1,\r\n                        },\r\n                    ],\r\n                }}\r\n                options={{\r\n                    animation: false,\r\n                }}\r\n                xkeys={learningData.inputs.keys}\r\n                ykeys={learningData.labels.keys}\r\n            />\r\n            <ChartContainer\r\n                data={{\r\n                    datasets: [\r\n                        {\r\n                            data: trainingLogs as any,\r\n                            label: metric,\r\n                            borderColor: MainColor,\r\n                            backgroundColor: MainColor,\r\n                            showLine: true,\r\n                            pointRadius: 0,\r\n                        },\r\n                        {\r\n                            data: trainingValLogs as any,\r\n                            label: `Validation error`,\r\n                            borderColor: SecondaryColor,\r\n                            backgroundColor: SecondaryColor,\r\n                            showLine: true,\r\n                            pointRadius: 0,\r\n                        },\r\n                    ],\r\n                }}\r\n                options={{\r\n                    animation: false,\r\n                    scales: {\r\n                        x: {\r\n                            title: {\r\n                                display: true,\r\n                                text: 'Epoch',\r\n                            },\r\n                            max: epochs > 0 ? epochs : 1,\r\n                            min: 0,\r\n                        },\r\n                    },\r\n                }}\r\n                title={'Learning curve'}\r\n                id={'LearningCurve'}\r\n            />\r\n\r\n            <StyledCardHeader>\r\n                <h3>Training options</h3>\r\n            </StyledCardHeader>\r\n            <LearningSettings />\r\n            <Row>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    onClick={isTraining ? stopTraining : handleTrainModel}\r\n                    endIcon={isTraining ? <PauseIcon /> : <PlayArrowIcon />}\r\n                    disabled={!isCompiled && !isTraining}\r\n                >\r\n                    {isTraining ? 'stop' : 'Train'}\r\n                </Button>\r\n            </Row>\r\n            {errors && <ErrorMessage>{`${errors.name}:  ${errors.message}`}</ErrorMessage>}\r\n        </StyledCard>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\n\r\nimport { Button } from '@material-ui/core'\r\n\r\nimport StyledCard from '../components/StyledCard'\r\nimport { Row } from '../components/Layout'\r\nimport { useTheme } from '@material-ui/core/styles'\r\n\r\nimport { useTensorflow } from '../context/Tensorflow'\r\nimport { useData } from '../context/Data'\r\nimport ChartContainer from '../components/ChartContainer'\r\nimport TextField from '@material-ui/core/TextField'\r\n\r\nexport default function TrainingSection() {\r\n    const { isCompiled, isTraining, evaulateData } = useTensorflow()\r\n    const [evaluationResults, setEvaluationResults] = useState({ evaluation: ['', ''] })\r\n\r\n    const { evaluationData } = useData()\r\n\r\n    const {\r\n        palette: {\r\n            primary: { main: MainColor },\r\n            secondary: { main: SecondaryColor },\r\n        },\r\n    } = useTheme()\r\n\r\n    console.log(evaluationResults)\r\n\r\n    return (\r\n        <StyledCard>\r\n            <ChartContainer\r\n                title={'Data Evaluation'}\r\n                id={'Data Evaluation'}\r\n                data={{\r\n                    datasets: [\r\n                        {\r\n                            data: evaluationData.scatter,\r\n                            label: 'Evaulation Data',\r\n                        },\r\n                        {\r\n                            data: evaluationResults.prediction,\r\n                            label: 'Prediction',\r\n                            backgroundColor: MainColor,\r\n                            borderColor: MainColor,\r\n                        },\r\n                        {\r\n                            data: evaluationResults.error,\r\n                            label: 'Error',\r\n                            backgroundColor: SecondaryColor,\r\n                            borderColor: SecondaryColor,\r\n                        },\r\n                    ],\r\n                }}\r\n                options={{\r\n                    animation: true,\r\n                }}\r\n                xkeys={evaluationData.inputs.keys}\r\n                ykeys={evaluationData.labels.keys}\r\n            />\r\n            <Row>\r\n                <TextField\r\n                    label={'metric loss loss'}\r\n                    inputProps={{ readOnly: true }}\r\n                    value={evaluationResults.evaluation[0].toString()}\r\n                />\r\n                <TextField\r\n                    label={'validation loss'}\r\n                    inputProps={{ readOnly: true }}\r\n                    value={evaluationResults.evaluation[1].toString()}\r\n                    variant=\"outlined\"\r\n                />\r\n            </Row>\r\n            <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                onClick={async () => {\r\n                    const { error, prediction, evaluation } = evaulateData()\r\n                    setEvaluationResults({ error, prediction, evaluation })\r\n                }}\r\n                disabled={!isCompiled}\r\n            >\r\n                Evaulate\r\n            </Button>\r\n        </StyledCard>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\n\r\nimport { Button, IconButton } from '@material-ui/core'\r\nimport SettingsIcon from '@material-ui/icons/Settings'\r\n\r\nimport StyledCard from '../components/StyledCard'\r\nimport { Container, Column, Row } from '../components/Layout'\r\nimport { useTheme } from '@material-ui/core/styles'\r\n\r\nimport { useTensorflow } from '../context/Tensorflow'\r\nimport LayersControls from '../containers/LayersControls'\r\nimport NetworkDiagram from '../components/NetworkDiagram'\r\nimport ModelOptions from '../containers/ModelOptions'\r\nimport TrainingDataForm from '../containers/TrainingDataForm'\r\nimport EvaluationDataForm from '../containers/EvaluationDataForm'\r\nimport TrainingSection from '../containers/TrainingSection'\r\nimport EvaluationSection from '../containers/EvaluationSection'\r\n\r\nexport default function Main() {\r\n    const {\r\n        compileModel,\r\n        isCompiled,\r\n        modelSettings: { layers },\r\n    } = useTensorflow()\r\n\r\n    const {\r\n        palette: {\r\n            primary: { main: MainColor },\r\n        },\r\n    } = useTheme()\r\n\r\n    console.log('render')\r\n\r\n    return (\r\n        <Container>\r\n            {/* Model section */}\r\n            <Column gridName={'model'}>\r\n                <Column.Header>Model</Column.Header>\r\n                <StyledCard>\r\n                    <StyledCard.Header>\r\n                        <h2>Network structure</h2>\r\n                        <IconButton size=\"small\" color=\"inherit\">\r\n                            <SettingsIcon />\r\n                        </IconButton>\r\n                    </StyledCard.Header>\r\n\r\n                    <NetworkDiagram layers={layers.map((layer) => layer.units)} color={MainColor} />\r\n\r\n                    <LayersControls />\r\n\r\n                    <StyledCard.Header>\r\n                        <h2>Model options</h2>\r\n                    </StyledCard.Header>\r\n                    <ModelOptions />\r\n                    <Row>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            onClick={compileModel}\r\n                            disabled={isCompiled}\r\n                        >\r\n                            {isCompiled ? 'Compiled' : 'Compile model'}\r\n                        </Button>\r\n                        <Button color=\"primary\" onClick={compileModel}>\r\n                            Reset model\r\n                        </Button>\r\n                    </Row>\r\n                </StyledCard>\r\n            </Column>\r\n\r\n            {/* Training section */}\r\n            <Column gridName={'training'}>\r\n                <Column.Header>Training</Column.Header>\r\n\r\n                <TrainingDataForm />\r\n                <TrainingSection />\r\n            </Column>\r\n            {/* Evaulation section */}\r\n            <Column gridName={'evaulation'}>\r\n                <Column.Header>Evaluation</Column.Header>\r\n                <EvaluationDataForm />\r\n\r\n                <EvaluationSection />\r\n            </Column>\r\n        </Container>\r\n    )\r\n}\r\n","import { DataProvider } from './context/Data'\nimport { TensorflowProvider } from './context/Tensorflow'\nimport Main from './pages/Main'\nimport { GlobalStyles } from './styles/globalStyles'\nimport { theme } from './styles'\nimport { ThemeProvider } from '@material-ui/core/styles'\n\nexport default function App() {\n    return (\n        <>\n            <DataProvider>\n                <TensorflowProvider>\n                    <ThemeProvider theme={theme}>\n                        <GlobalStyles theme={theme} />\n                        <Main />\n                    </ThemeProvider>\n                </TensorflowProvider>\n            </DataProvider>\n        </>\n    )\n}\n","/* import './wdyr' // <--- for debugging only */\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals()\n"],"sourceRoot":""}